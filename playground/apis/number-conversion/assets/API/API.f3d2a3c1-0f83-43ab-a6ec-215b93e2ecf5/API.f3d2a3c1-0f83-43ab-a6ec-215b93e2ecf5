{
  "apiDefinition" : {
    "info" : {
      "description" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
      "version" : "1.0.8",
      "title" : "SwaggerPetstore",
      "termsOfService" : "http://swagger.io/terms/",
      "contact" : {
        "email" : "apiteam@swagger.io"
      },
      "license" : {
        "name" : "Apache 2.0",
        "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "serviceRegistryDisplayName" : "SwaggerPetstore_1.0",
    "tags" : [ {
      "name" : "pet",
      "description" : "Everything about your Pets",
      "externalDocs" : {
        "description" : "Find out more",
        "url" : "http://swagger.io"
      }
    }, {
      "name" : "store",
      "description" : "Access to Petstore orders"
    }, {
      "name" : "user",
      "description" : "Operations about user",
      "externalDocs" : {
        "description" : "Find out more about our store",
        "url" : "http://swagger.io"
      }
    } ],
    "schemes" : [ ],
    "security" : [ {
      "requirements" : {
        "apiKey" : [ ]
      }
    } ],
    "paths" : {
      "/pet" : {
        "put" : {
          "tags" : [ "pet" ],
          "summary" : "Update an existing pet",
          "operationId" : "updatePet",
          "consumes" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "405" : {
              "description" : "Validation exception",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              }
            },
            "name" : "updatePet"
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Add a new pet to the store",
          "operationId" : "addPet",
          "consumes" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "405" : {
              "description" : "Invalid input",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              }
            },
            "name" : "addPet"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet",
        "enabled" : true
      },
      "/user/{username}" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Get user by user name",
          "operationId" : "getUserByName",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "The name that needs to be fetched. Use user1 for testing. ",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid username supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getUserByName"
          }
        },
        "put" : {
          "tags" : [ "user" ],
          "summary" : "Updated user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "updateUser",
          "consumes" : [ "application/json" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "name that need to be updated",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid user supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              }
            },
            "name" : "updateUser"
          }
        },
        "delete" : {
          "tags" : [ "user" ],
          "summary" : "Delete user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "deleteUser",
          "parameters" : [ {
            "name" : "username",
            "in" : "path",
            "description" : "The name that needs to be deleted",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid username supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deleteUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/{username}",
        "enabled" : true
      },
      "/pet/findByStatus" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by status",
          "description" : "Multiple status values can be provided with comma separated strings",
          "operationId" : "findPetsByStatus",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "status",
            "in" : "query",
            "description" : "Status values that need to be considered for filter",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid status value",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "findPetsByStatus"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/findByStatus",
        "enabled" : true
      },
      "/user/createWithList" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "operationId" : "createUsersWithListInput",
          "consumes" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/User\"}}"
                },
                "examples" : { }
              }
            },
            "name" : "createUsersWithListInput"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/createWithList",
        "enabled" : true
      },
      "/pet/{petId}/uploadImage" : {
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "uploads an image",
          "operationId" : "uploadFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet to update",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApiResponse"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "multipart/form-data" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"object\",\"properties\":{\"additionalMetadata\":{\"type\":\"string\",\"description\":\"Additional data to pass to server\",\"readOnly\":false},\"file\":{\"type\":\"string\",\"description\":\"file to upload\",\"format\":\"binary\",\"readOnly\":false}}}"
                },
                "examples" : { }
              }
            },
            "name" : "uploadFile"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/{petId}/uploadImage",
        "enabled" : true
      },
      "/store/inventory" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Returns pet inventories by status",
          "description" : "Returns a map of status codes to quantities",
          "operationId" : "getInventory",
          "produces" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"object\"}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getInventory"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/inventory",
        "enabled" : true
      },
      "/user/login" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs user into the system",
          "operationId" : "loginUser",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "username",
            "in" : "query",
            "description" : "The user name for login",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string"
            }
          }, {
            "name" : "password",
            "in" : "query",
            "description" : "The password for login in clear text",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"string\"}"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"string\"}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid username/password supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "loginUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/login",
        "enabled" : true
      },
      "/user" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Create user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "createUser",
          "consumes" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              }
            },
            "name" : "createUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user",
        "enabled" : true
      },
      "/user/createWithArray" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "operationId" : "createUsersWithArrayInput",
          "consumes" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/User\"}}"
                },
                "examples" : { }
              }
            },
            "name" : "createUsersWithArrayInput"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/createWithArray",
        "enabled" : true
      },
      "/pet/findByTags" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by tags",
          "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId" : "findPetsByTags",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "tags",
            "in" : "query",
            "description" : "Tags to filter by",
            "required" : true,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid tag value",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "deprecated" : true,
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "findPetsByTags"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/findByTags",
        "enabled" : true
      },
      "/store/order" : {
        "post" : {
          "tags" : [ "store" ],
          "summary" : "Place an order for a pet",
          "operationId" : "placeOrder",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid Order",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "examples" : { }
              }
            },
            "name" : "placeOrder"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/order",
        "enabled" : true
      },
      "/user/logout" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs out current logged in user session",
          "operationId" : "logoutUser",
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "logoutUser"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/user/logout",
        "enabled" : true
      },
      "/pet/{petId}" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Find pet by ID",
          "description" : "Returns a single pet",
          "operationId" : "getPetById",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet to return",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getPetById"
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Updates a pet in the store with form data",
          "operationId" : "updatePetWithForm",
          "consumes" : [ "application/x-www-form-urlencoded" ],
          "parameters" : [ {
            "name" : "petId",
            "in" : "path",
            "description" : "ID of pet that needs to be updated",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "405" : {
              "description" : "Invalid input",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Updated name of the pet\",\"readOnly\":false},\"status\":{\"type\":\"string\",\"description\":\"Updated status of the pet\",\"readOnly\":false}}}"
                },
                "examples" : { }
              }
            },
            "name" : "updatePetWithForm"
          }
        },
        "delete" : {
          "tags" : [ "pet" ],
          "summary" : "Deletes a pet",
          "operationId" : "deletePet",
          "parameters" : [ {
            "name" : "api_key",
            "in" : "header",
            "required" : false,
            "type" : "string",
            "parameterSchema" : {
              "type" : "string"
            }
          }, {
            "name" : "petId",
            "in" : "path",
            "description" : "Pet id to delete",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deletePet"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/pet/{petId}",
        "enabled" : true
      },
      "/store/order/{orderId}" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Find purchase order by ID",
          "description" : "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "operationId" : "getOrderById",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "name" : "orderId",
            "in" : "path",
            "description" : "ID of pet that needs to be fetched",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Order not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getOrderById"
          }
        },
        "delete" : {
          "tags" : [ "store" ],
          "summary" : "Delete purchase order by ID",
          "description" : "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId" : "deleteOrder",
          "parameters" : [ {
            "name" : "orderId",
            "in" : "path",
            "description" : "ID of the order that needs to be deleted",
            "required" : true,
            "type" : "integer",
            "format" : "int64",
            "parameterSchema" : {
              "type" : "integer",
              "format" : "int64"
            }
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Order not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deleteOrder"
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "displayName" : "/store/order/{orderId}",
        "enabled" : true
      }
    },
    "securityDefinitions" : { },
    "definitions" : { },
    "parameters" : { },
    "baseUriParameters" : [ ],
    "externalDocs" : [ {
      "description" : "Find out more about Swagger",
      "url" : "http://swagger.io"
    } ],
    "servers" : [ {
      "url" : "https://petstore.swagger.io/v2",
      "variables" : { }
    } ],
    "components" : {
      "schemas" : {
        "Order" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"complete\":{\"type\":\"boolean\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"petId\":{\"type\":\"integer\",\"format\":\"int64\"},\"quantity\":{\"type\":\"integer\",\"format\":\"int32\"},\"shipDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"status\":{\"type\":\"string\",\"description\":\"Order Status\",\"enum\":[\"placed\",\"approved\",\"delivered\"]}},\"xml\":{\"name\":\"Order\"}}"
        },
        "Category" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"Category\"}}"
        },
        "User" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"lastName\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"},\"phone\":{\"type\":\"string\"},\"userStatus\":{\"type\":\"integer\",\"description\":\"User Status\",\"format\":\"int32\"},\"username\":{\"type\":\"string\"}},\"xml\":{\"name\":\"User\"}}"
        },
        "Tag" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"Tag\"}}"
        },
        "ApiResponse" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"integer\",\"format\":\"int32\"},\"message\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}}}"
        },
        "Pet" : {
          "type" : "gateway",
          "schema" : "{\"required\":[\"name\",\"photoUrls\"],\"type\":\"object\",\"properties\":{\"category\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Category\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\",\"example\":\"doggie\"},\"photoUrls\":{\"type\":\"array\",\"xml\":{\"wrapped\":true},\"items\":{\"type\":\"string\"}},\"status\":{\"type\":\"string\",\"description\":\"pet status in the store\",\"enum\":[\"available\",\"pending\",\"sold\"]},\"tags\":{\"type\":\"array\",\"xml\":{\"wrapped\":true},\"items\":{\"type\":\"object\",\"$ref\":\"#/components/schemas/Tag\"}}},\"xml\":{\"name\":\"Pet\"}}"
        }
      },
      "responses" : { },
      "parameters" : { },
      "examples" : { },
      "requestBodies" : { },
      "headers" : { },
      "links" : { },
      "callbacks" : { }
    },
    "type" : "rest"
  },
  "nativeEndpoint" : [ {
    "passSecurityHeaders" : true,
    "uri" : "https://petstore.swagger.io/v2",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  } ],
  "apiName" : "SwaggerPetstore",
  "apiVersion" : "1.0",
  "apiDescription" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "maturityState" : "Experimental",
  "apiGroups" : [ "Internal" ],
  "isActive" : true,
  "type" : "REST",
  "owner" : "Administrator",
  "policies" : [ "479e023e-526e-4bd7-a423-fbf092368e13" ],
  "referencedFiles" : {
    "SwaggerPetstore.json" : "{\n  \"openapi\" : \"3.0.1\",\n  \"info\" : {\n    \"title\" : \"SwaggerPetstore\",\n    \"description\" : \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n    \"termsOfService\" : \"http://swagger.io/terms/\",\n    \"contact\" : {\n      \"email\" : \"apiteam@swagger.io\"\n    },\n    \"license\" : {\n      \"name\" : \"Apache 2.0\",\n      \"url\" : \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    },\n    \"version\" : \"1.0.8\"\n  },\n  \"externalDocs\" : {\n    \"description\" : \"Find out more about Swagger\",\n    \"url\" : \"http://swagger.io\"\n  },\n  \"servers\" : [ {\n    \"url\" : \"https://apigw-staging-1.10.61.132.55.xip.io/gateway/SwaggerPetstore/1.0.8\"\n  } ],\n  \"security\" : [ {\n    \"apiKey\" : [ ]\n  } ],\n  \"tags\" : [ {\n    \"name\" : \"pet\",\n    \"description\" : \"Everything about your Pets\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more\",\n      \"url\" : \"http://swagger.io\"\n    }\n  }, {\n    \"name\" : \"store\",\n    \"description\" : \"Access to Petstore orders\"\n  }, {\n    \"name\" : \"user\",\n    \"description\" : \"Operations about user\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more about our store\",\n      \"url\" : \"http://swagger.io\"\n    }\n  } ],\n  \"paths\" : {\n    \"/pet\" : {\n      \"summary\" : \"/pet\",\n      \"put\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Update an existing pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePet\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"application/xml\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/Pet\"\n              },\n              \"examples\" : { }\n            },\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/Pet\"\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"405\" : {\n            \"description\" : \"Validation exception\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Add a new pet to the store\",\n        \"description\" : \"\",\n        \"operationId\" : \"addPet\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"application/xml\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/Pet\"\n              },\n              \"examples\" : { }\n            },\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/Pet\"\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/user/{username}\" : {\n      \"summary\" : \"/user/{username}\",\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Get user by user name\",\n        \"description\" : \"\",\n        \"operationId\" : \"getUserByName\",\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/xml\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/User\"\n                },\n                \"examples\" : { }\n              },\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/User\"\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"404\" : {\n            \"description\" : \"User not found\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"put\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Updated user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"updateUser\",\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"name that need to be updated\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/User\"\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid user supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"404\" : {\n            \"description\" : \"User not found\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"delete\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Delete user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"deleteUser\",\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be deleted\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"404\" : {\n            \"description\" : \"User not found\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/pet/findByStatus\" : {\n      \"summary\" : \"/pet/findByStatus\",\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by status\",\n        \"description\" : \"Multiple status values can be provided with comma separated strings\",\n        \"operationId\" : \"findPetsByStatus\",\n        \"parameters\" : [ {\n          \"name\" : \"status\",\n          \"in\" : \"query\",\n          \"description\" : \"Status values that need to be considered for filter\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/xml\" : {\n                \"schema\" : {\n                  \"type\" : \"array\",\n                  \"items\" : {\n                    \"$ref\" : \"#/components/schemas/Pet\"\n                  }\n                },\n                \"examples\" : { }\n              },\n              \"application/json\" : {\n                \"schema\" : {\n                  \"type\" : \"array\",\n                  \"items\" : {\n                    \"$ref\" : \"#/components/schemas/Pet\"\n                  }\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid status value\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/user/createWithList\" : {\n      \"summary\" : \"/user/createWithList\",\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithListInput\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"type\" : \"array\",\n                \"items\" : {\n                  \"$ref\" : \"#/components/schemas/User\"\n                }\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/pet/{petId}/uploadImage\" : {\n      \"summary\" : \"/pet/{petId}/uploadImage\",\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"uploads an image\",\n        \"description\" : \"\",\n        \"operationId\" : \"uploadFile\",\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to update\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          }\n        } ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"multipart/form-data\" : {\n              \"schema\" : {\n                \"type\" : \"object\",\n                \"properties\" : {\n                  \"file\" : {\n                    \"type\" : \"string\",\n                    \"description\" : \"file to upload\",\n                    \"format\" : \"binary\",\n                    \"readOnly\" : false\n                  },\n                  \"additionalMetadata\" : {\n                    \"type\" : \"string\",\n                    \"description\" : \"Additional data to pass to server\",\n                    \"readOnly\" : false\n                  }\n                }\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/ApiResponse\"\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/store/inventory\" : {\n      \"summary\" : \"/store/inventory\",\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Returns pet inventories by status\",\n        \"description\" : \"Returns a map of status codes to quantities\",\n        \"operationId\" : \"getInventory\",\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/json\" : {\n                \"schema\" : {\n                  \"type\" : \"object\"\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/user/login\" : {\n      \"summary\" : \"/user/login\",\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs user into the system\",\n        \"description\" : \"\",\n        \"operationId\" : \"loginUser\",\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"query\",\n          \"description\" : \"The user name for login\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        }, {\n          \"name\" : \"password\",\n          \"in\" : \"query\",\n          \"description\" : \"The password for login in clear text\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/xml\" : {\n                \"schema\" : {\n                  \"type\" : \"string\"\n                },\n                \"examples\" : { }\n              },\n              \"application/json\" : {\n                \"schema\" : {\n                  \"type\" : \"string\"\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username/password supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/user\" : {\n      \"summary\" : \"/user\",\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Create user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"createUser\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/User\"\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/user/createWithArray\" : {\n      \"summary\" : \"/user/createWithArray\",\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithArrayInput\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"type\" : \"array\",\n                \"items\" : {\n                  \"$ref\" : \"#/components/schemas/User\"\n                }\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/pet/findByTags\" : {\n      \"summary\" : \"/pet/findByTags\",\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by tags\",\n        \"description\" : \"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\" : \"findPetsByTags\",\n        \"parameters\" : [ {\n          \"name\" : \"tags\",\n          \"in\" : \"query\",\n          \"description\" : \"Tags to filter by\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/xml\" : {\n                \"schema\" : {\n                  \"type\" : \"array\",\n                  \"items\" : {\n                    \"$ref\" : \"#/components/schemas/Pet\"\n                  }\n                },\n                \"examples\" : { }\n              },\n              \"application/json\" : {\n                \"schema\" : {\n                  \"type\" : \"array\",\n                  \"items\" : {\n                    \"$ref\" : \"#/components/schemas/Pet\"\n                  }\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid tag value\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        },\n        \"deprecated\" : true\n      },\n      \"parameters\" : [ ]\n    },\n    \"/store/order\" : {\n      \"summary\" : \"/store/order\",\n      \"post\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Place an order for a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"placeOrder\",\n        \"parameters\" : [ ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"application/json\" : {\n              \"schema\" : {\n                \"$ref\" : \"#/components/schemas/Order\"\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/xml\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/Order\"\n                },\n                \"examples\" : { }\n              },\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/Order\"\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid Order\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/user/logout\" : {\n      \"summary\" : \"/user/logout\",\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs out current logged in user session\",\n        \"description\" : \"\",\n        \"operationId\" : \"logoutUser\",\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/pet/{petId}\" : {\n      \"summary\" : \"/pet/{petId}\",\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Find pet by ID\",\n        \"description\" : \"Returns a single pet\",\n        \"operationId\" : \"getPetById\",\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to return\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/xml\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/Pet\"\n                },\n                \"examples\" : { }\n              },\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/Pet\"\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Updates a pet in the store with form data\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePetWithForm\",\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be updated\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          }\n        } ],\n        \"requestBody\" : {\n          \"content\" : {\n            \"application/x-www-form-urlencoded\" : {\n              \"schema\" : {\n                \"type\" : \"object\",\n                \"properties\" : {\n                  \"name\" : {\n                    \"type\" : \"string\",\n                    \"description\" : \"Updated name of the pet\",\n                    \"readOnly\" : false\n                  },\n                  \"status\" : {\n                    \"type\" : \"string\",\n                    \"description\" : \"Updated status of the pet\",\n                    \"readOnly\" : false\n                  }\n                }\n              },\n              \"examples\" : { }\n            }\n          }\n        },\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"delete\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Deletes a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"deletePet\",\n        \"parameters\" : [ {\n          \"name\" : \"api_key\",\n          \"in\" : \"header\",\n          \"required\" : false,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"string\"\n          }\n        }, {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"Pet id to delete\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    },\n    \"/store/order/{orderId}\" : {\n      \"summary\" : \"/store/order/{orderId}\",\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Find purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n        \"operationId\" : \"getOrderById\",\n        \"parameters\" : [ {\n          \"name\" : \"orderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be fetched\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : { },\n            \"content\" : {\n              \"application/xml\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/Order\"\n                },\n                \"examples\" : { }\n              },\n              \"application/json\" : {\n                \"schema\" : {\n                  \"$ref\" : \"#/components/schemas/Order\"\n                },\n                \"examples\" : { }\n              }\n            },\n            \"links\" : { }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"delete\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Delete purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n        \"operationId\" : \"deleteOrder\",\n        \"parameters\" : [ {\n          \"name\" : \"orderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of the order that needs to be deleted\",\n          \"required\" : true,\n          \"allowEmptyValue\" : false,\n          \"schema\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\",\n            \"headers\" : { },\n            \"content\" : { },\n            \"links\" : { }\n          }\n        }\n      },\n      \"parameters\" : [ ]\n    }\n  },\n  \"components\" : {\n    \"schemas\" : {\n      \"Order\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"petId\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"quantity\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"complete\" : {\n            \"type\" : \"boolean\"\n          },\n          \"shipDate\" : {\n            \"type\" : \"string\",\n            \"format\" : \"date-time\"\n          },\n          \"status\" : {\n            \"type\" : \"string\",\n            \"description\" : \"Order Status\",\n            \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n          }\n        },\n        \"xml\" : {\n          \"name\" : \"Order\"\n        }\n      },\n      \"Category\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          }\n        },\n        \"xml\" : {\n          \"name\" : \"Category\"\n        }\n      },\n      \"User\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"firstName\" : {\n            \"type\" : \"string\"\n          },\n          \"lastName\" : {\n            \"type\" : \"string\"\n          },\n          \"password\" : {\n            \"type\" : \"string\"\n          },\n          \"userStatus\" : {\n            \"type\" : \"integer\",\n            \"description\" : \"User Status\",\n            \"format\" : \"int32\"\n          },\n          \"phone\" : {\n            \"type\" : \"string\"\n          },\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"email\" : {\n            \"type\" : \"string\"\n          },\n          \"username\" : {\n            \"type\" : \"string\"\n          }\n        },\n        \"xml\" : {\n          \"name\" : \"User\"\n        }\n      },\n      \"Tag\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"name\" : {\n            \"type\" : \"string\"\n          },\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          }\n        },\n        \"xml\" : {\n          \"name\" : \"Tag\"\n        }\n      },\n      \"ApiResponse\" : {\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"code\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int32\"\n          },\n          \"message\" : {\n            \"type\" : \"string\"\n          },\n          \"type\" : {\n            \"type\" : \"string\"\n          }\n        }\n      },\n      \"Pet\" : {\n        \"required\" : [ \"name\", \"photoUrls\" ],\n        \"type\" : \"object\",\n        \"properties\" : {\n          \"photoUrls\" : {\n            \"type\" : \"array\",\n            \"xml\" : {\n              \"wrapped\" : true\n            },\n            \"items\" : {\n              \"type\" : \"string\"\n            }\n          },\n          \"name\" : {\n            \"type\" : \"string\",\n            \"example\" : \"doggie\"\n          },\n          \"id\" : {\n            \"type\" : \"integer\",\n            \"format\" : \"int64\"\n          },\n          \"category\" : {\n            \"$ref\" : \"#/components/schemas/Category\"\n          },\n          \"status\" : {\n            \"type\" : \"string\",\n            \"description\" : \"pet status in the store\",\n            \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n          },\n          \"tags\" : {\n            \"type\" : \"array\",\n            \"xml\" : {\n              \"wrapped\" : true\n            },\n            \"items\" : {\n              \"$ref\" : \"#/components/schemas/Tag\"\n            }\n          }\n        },\n        \"xml\" : {\n          \"name\" : \"Pet\"\n        }\n      }\n    },\n    \"responses\" : { },\n    \"parameters\" : { },\n    \"examples\" : { },\n    \"requestBodies\" : { },\n    \"headers\" : { },\n    \"securitySchemes\" : {\n      \"apiKey\" : {\n        \"type\" : \"apiKey\",\n        \"name\" : \"x-Gateway-APIKey\",\n        \"in\" : \"header\"\n      }\n    },\n    \"links\" : { },\n    \"callbacks\" : { }\n  }\n}\n"
  },
  "tracingEnabled" : false,
  "scopes" : [ ],
  "publishedPortals" : [ ],
  "creationDate" : "2021-03-17 07:22:07 GMT",
  "lastModified" : "2021-05-17 14:48:24 GMT",
  "systemVersion" : 1,
  "gatewayEndpoints" : { },
  "deployments" : [ "APIGateway" ],
  "id" : "f3d2a3c1-0f83-43ab-a6ec-215b93e2ecf5"
}