{
	"info": {
		"_postman_id": "d0f31cd5-5bf8-46f2-8e53-c598c878ba86",
		"name": "Prepare_for_DEV_INT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "3558839-d0f31cd5-5bf8-46f2-8e53-c598c878ba86"
	},
	"item": [
		{
			"name": "Get and Validate all Policy Actions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let policyActions = JSON.parse(responseBody).policyAction;\r",
							"if (policyActions === undefined || policyActions === null || policyActions.length === 0) {\r",
							"} else {\r",
							"    for (i in policyActions) {\r",
							"        if ((policyActions[i].templateKey === \"logInvocation\") && (policyActions[i].id !== \"GlobalLogInvocationPolicyAction\")) {\r",
							"            console.log(\"Log Invocation policy not allowed on API level\");\r",
							"            console.log(\"ID: \" + policyActions[i].id);\r",
							"            console.log(\"Name: \" + policyActions[i].names[0].value);\r",
							"\r",
							"            pm.test(\"No local Log Invocation policies\", function () {\r",
							"                pm.expect(policyActions[i].templateKey).not.to.be.equal(\"logInvocation\");\r",
							"            });\r",
							"\r",
							"            postman.setNextRequest(null);\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"id": "dbee5ab0-f189-470e-ae80-7f0c1d2fe907"
					}
				}
			],
			"id": "0b41b716-715f-4928-9033-44f2c4528020",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/policyActions",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"policyActions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get and Validate all Applications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let apiResponse=JSON.parse(responseBody);\r",
							"let applications = apiResponse.applications;\r",
							"if (applications === undefined || applications === null || applications.length === 0) {\r",
							"} else {\r",
							"    for (i in applications) {\r",
							"        if (!(applications[i].name.endsWith(\"_CONFIG\") || applications[i].name.endsWith(\"_DEV\")\r",
							"                || applications[i].name.endsWith(\"_STAGE\") || applications[i].name.endsWith(\"_TEST\")\r",
							"                || applications[i].name.endsWith(\"_PROD\"))) {\r",
							"            console.log(\"Application name must end with _ plus environment name\");\r",
							"            console.log(\"ID: \" + applications[i].id);\r",
							"            console.log(\"Name: \" + applications[i].name);\r",
							"            console.log(\"Version: \" + applications[i].version);\r",
							"            console.log(\"Description: \" + applications[i].description);\r",
							"\r",
							"            pm.test(\"Application name end with _ plus environment name\", function () {\r",
							"                pm.expect.fail(\"Application name does not end with _ plus environment name: \" + applications[i].name);\r",
							"            });\r",
							"\r",
							"            postman.setNextRequest(null);\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"id": "198ac4ea-6b7e-4e04-bb65-7b3e81f270ba"
					}
				}
			],
			"id": "5a578dbe-c143-40a4-94e5-9e72634cd39f",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/applications",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Aliases",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let aliasesString = pm.variables.get(\"aliases\");\r",
							"let globalAliasesString = pm.variables.get(\"globalAliases\");\r",
							"\r",
							"// console.log(\"aliases Postman variable: \" + aliasesString);\r",
							"// console.log(\"globalAliases Postman variable: \" + globalAliasesString);\r",
							"\r",
							"let oldAliases = JSON.parse(responseBody).alias;\r",
							"\r",
							"let aliasIds = [];\r",
							"let remainingAliases = [];\r",
							"postman.setNextRequest(\"Get all Applications\");\r",
							"\r",
							"if (aliasesString !== undefined && aliasesString !== null && aliasesString !== \"\") {\r",
							"    let aliases = JSON.parse(aliasesString);\r",
							"\r",
							"//    console.log(\"Parsed aliases Postman variable: \" + JSON.stringify(aliases));\r",
							"\r",
							"    if (aliases.length > 0) {\r",
							"        for (var i=0; i<aliases.length; i++) { // Check aliases\r",
							"            if (aliases[i] != undefined && aliases[i] != null\r",
							"                && aliases[i].id != undefined && aliases[i].id != null\r",
							"                && aliases[i].content != undefined && aliases[i].content != null\r",
							"                && aliases[i].content.name != undefined && aliases[i].content.name != null) {\r",
							"\r",
							"                let aliasId = aliases[i].id;\r",
							"\r",
							"//                console.log(\"Alias ID to be checked: \" + aliasId);\r",
							"\r",
							"                if (aliasIds.includes(aliasId)) {\r",
							"                    console.log(\"Duplicate alias definition!\");\r",
							"                    console.log(\"ID: \" + aliases[i].id);\r",
							"                    console.log(\"Name: \" + aliases[i].content.name);\r",
							"                    console.log(\"Description: \" + aliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias definition must be unique\", function () {\r",
							"                        pm.expect(aliasIds).not.to.include(aliasId);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    postman.setNextRequest(null);\r",
							"                    break;\r",
							"                }\r",
							"\r",
							"                let matchingaliases = oldAliases.filter(alias => alias.id === aliasId);\r",
							"\r",
							"//                console.log(\"Matching aliases: \" + JSON.stringify(matchingaliases));\r",
							"\r",
							"                if (matchingaliases.length === 0) { // No alias found\r",
							"                    console.log(\"No matching alias found!\");\r",
							"                    console.log(\"ID: \" + aliases[i].id);\r",
							"                    console.log(\"Name: \" + aliases[i].content.name);\r",
							"                    console.log(\"Description: \" + aliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias to be updated must exist\", function () {\r",
							"                        pm.expect(matchingaliases.length).to.be.equal(1);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    postman.setNextRequest(null);\r",
							"                    break;\r",
							"                } else if (matchingaliases.length === 1) { // One alias found\r",
							"//                    console.log(\"Found!\");\r",
							"\r",
							"                    if (matchingaliases[0].name !== aliases[i].content.name) {\r",
							"                        console.log(\"Names do not match!\");\r",
							"                        console.log(\"ID: \" + aliases[i].id);\r",
							"                        console.log(\"Name: \" + aliases[i].content.name);\r",
							"                        console.log(\"Description: \" + aliases[i].content.description);\r",
							"\r",
							"                        pm.test(\"Alias to be updated must have the same name\", function () {\r",
							"                            pm.expect(matchingaliases[0].name).to.be.equal(aliases[i].content.name);\r",
							"                        });\r",
							"\r",
							"                        remainingAliases = null;\r",
							"                        postman.setNextRequest(null);\r",
							"                        break;\r",
							"                    } else {\r",
							"                        remainingAliases.push(aliases[i]);\r",
							"                        aliasIds.push(aliases[i].id);\r",
							"                        postman.setNextRequest(\"Update one Alias\");\r",
							"                    }\r",
							"                } else { // More than one alias found\r",
							"                    console.log(\"More than one matching alias found!\");\r",
							"                    console.log(\"ID: \" + aliases[i].id);\r",
							"                    console.log(\"Name: \" + aliases[i].content.name);\r",
							"                    console.log(\"Description: \" + aliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias to be updated must exist\", function () {\r",
							"                        pm.expect(matchingaliases.length).to.be.equal(1);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    postman.setNextRequest(null);\r",
							"                    break;\r",
							"                }\r",
							"            } else {\r",
							"\t\t\t\tif (aliases[i] === undefined || aliases[i] === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias definition!\");\r",
							"\t\t\t\t} else if (aliases[i].id === undefined || aliases[i].id === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias ID!\");\r",
							"\t\t\t\t\tconsole.log(\"Alias: \" + JSON.stringify(aliases[i]));\r",
							"\t\t\t\t} else if (aliases[i].content === undefined || aliases[i].content === null) { // no value defined for this alias on this stage, not an error case!\r",
							"\t\t\t\t\tcontinue; // Just skip this alias\r",
							"\t\t\t\t} else if (aliases[i].content.name === undefined || aliases[i].content.name === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias name!\");\r",
							"\t\t\t\t\tconsole.log(\"ID: \" + aliases[i].id);\r",
							"\t\t\t\t\tconsole.log(\"Alias: \" + JSON.stringify(aliases[i]));\r",
							"\t\t\t\t}\r",
							"\r",
							"                pm.test(\"Consistent alias definition with id and name\", function () {\r",
							"                    pm.expect.fail(\"Inconsistent alias definition: Missing alias or missing id or missing content.name\");\r",
							"                });\r",
							"\r",
							"                remainingAliases = null;\r",
							"                postman.setNextRequest(null);\r",
							"                break;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"if (remainingAliases !== null && globalAliasesString !== undefined && globalAliasesString !== null && globalAliasesString !== \"\") {\r",
							"    let globalAliases = JSON.parse(globalAliasesString);\r",
							"\r",
							"//    console.log(\"Parsed globalAliases Postman variable: \" + JSON.stringify(globalAliases));\r",
							"\r",
							"    if (globalAliases.length > 0) {\r",
							"        for (var i=0; i<globalAliases.length; i++) { // Check aliases\r",
							"            if (globalAliases[i] != undefined && globalAliases[i] != null\r",
							"                && globalAliases[i].id != undefined && globalAliases[i].id != null\r",
							"                && globalAliases[i].content != undefined && globalAliases[i].content != null\r",
							"                && globalAliases[i].content.name != undefined && globalAliases[i].content.name != null) {\r",
							"\r",
							"                let aliasId = globalAliases[i].id;\r",
							"\r",
							"//                console.log(\"Alias ID to be checked: \" + aliasId);\r",
							"\r",
							"                if (aliasIds.includes(aliasId)) {\r",
							"                    console.log(\"Duplicate alias definition!\");\r",
							"                    console.log(\"ID: \" + globalAliases[i].id);\r",
							"                    console.log(\"Name: \" + globalAliases[i].content.name);\r",
							"                    console.log(\"Description: \" + globalAliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias definition must be unique\", function () {\r",
							"                        pm.expect(aliasIds).not.to.include(aliasId);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    postman.setNextRequest(null);\r",
							"                    break;\r",
							"                }\r",
							"\r",
							"                let matchingaliases = oldAliases.filter(alias => alias.id === aliasId);\r",
							"\r",
							"//                console.log(\"Matching aliases: \" + JSON.stringify(matchingaliases));\r",
							"\r",
							"                if (matchingaliases.length === 0) { // No alias found, no error for global aliases\r",
							"//                    console.log(\"Not found!\");\r",
							"                } else if (matchingaliases.length === 1) { // One alias found\r",
							"//                    console.log(\"Found!\");\r",
							"\r",
							"                    if (matchingaliases[0].name !== globalAliases[i].content.name) {\r",
							"                        console.log(\"Names do not match!\");\r",
							"                        console.log(\"ID: \" + globalAliases[i].id);\r",
							"                        console.log(\"Name: \" + globalAliases[i].content.name);\r",
							"                        console.log(\"Description: \" + globalAliases[i].content.description);\r",
							"\r",
							"                        pm.test(\"Alias to be updated must have the same name\", function () {\r",
							"                            pm.expect(matchingaliases[0].name).to.be.equal(globalAliases[i].content.name);\r",
							"                        });\r",
							"\r",
							"                        remainingAliases = null;\r",
							"                        postman.setNextRequest(null);\r",
							"                        break;\r",
							"                    } else {\r",
							"                        remainingAliases.push(globalAliases[i]);\r",
							"                        aliasIds.push(globalAliases[i].id);\r",
							"                        postman.setNextRequest(\"Update one Alias\");\r",
							"                    }\r",
							"                } else { // More than one alias found\r",
							"                    console.log(\"More than one matching alias found!\");\r",
							"                    console.log(\"ID: \" + globalAliases[i].id);\r",
							"                    console.log(\"Name: \" + globalAliases[i].content.name);\r",
							"                    console.log(\"Description: \" + globalAliases[i].content.description);\r",
							"\r",
							"                    pm.test(\"Alias to be updated must exist\", function () {\r",
							"                        pm.expect(matchingaliases.length).to.be.equal(1);\r",
							"                    });\r",
							"\r",
							"                    remainingAliases = null;\r",
							"                    postman.setNextRequest(null);\r",
							"                    break;\r",
							"                }\r",
							"            } else {\r",
							"\t\t\t\tif (globalAliases[i] === undefined || globalAliases[i] === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias definition!\");\r",
							"\t\t\t\t} else if (globalAliases[i].id === undefined || globalAliases[i].id === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias ID!\");\r",
							"\t\t\t\t\tconsole.log(\"Alias: \" + JSON.stringify(globalAliases[i]));\r",
							"\t\t\t\t} else if (globalAliases[i].content === undefined || globalAliases[i].content === null) { // no value defined for this alias on this stage, not an error case!\r",
							"\t\t\t\t\tcontinue; // Just skip this alias\r",
							"\t\t\t\t} else if (globalAliases[i].content.name === undefined || globalAliases[i].content.name === null) {\r",
							"\t\t\t\t\tconsole.log(\"Missing alias name!\");\r",
							"\t\t\t\t\tconsole.log(\"ID: \" + globalAliases[i].id);\r",
							"\t\t\t\t\tconsole.log(\"Alias: \" + JSON.stringify(globalAliases[i]));\r",
							"\t\t\t\t}\r",
							"\r",
							"                pm.test(\"Consistent alias definition with id and name\", function () {\r",
							"                    pm.expect.fail(\"Inconsistent alias definition: Missing alias or missing id or missing content.name\");\r",
							"                });\r",
							"\r",
							"                remainingAliases = null;\r",
							"                postman.setNextRequest(null);\r",
							"                break;\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"if (remainingAliases !== null && remainingAliases.length > 0) {\r",
							"    let alias = remainingAliases.shift();\r",
							"    let aliasId = alias.id;\r",
							"    let aliasContent = alias.content;\r",
							"\r",
							"    remainingAliasesString = JSON.stringify(remainingAliases);\r",
							"    let aliasContentString = JSON.stringify(aliasContent);\r",
							"\r",
							"    console.log(\"Update alias\");\r",
							"    console.log(\"ID: \" + aliasId);\r",
							"    console.log(\"Name: \" + aliasContent.name);\r",
							"    console.log(\"Description: \" + aliasContent.description);\r",
							"\r",
							"    pm.globals.set(\"remainingAliases\", remainingAliasesString);\r",
							"    pm.globals.set(\"aliasContent\", aliasContentString);\r",
							"    pm.globals.set(\"aliasId\", aliasId);\r",
							"}"
						],
						"type": "text/javascript",
						"id": "898483b9-994e-435b-b0eb-a262f73e6309"
					}
				}
			],
			"id": "4a453b8f-b954-4036-b961-bf438d7c6982",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/alias",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"alias"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update one Alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let aliasesString = pm.variables.get(\"remainingAliases\");\r",
							"\r",
							"// console.log(\"aliases Postman variable: \" + aliasesString);\r",
							"\r",
							"if (aliasesString === undefined || aliasesString === null || aliasesString === \"\") {\r",
							"    postman.setNextRequest(\"Get all Applications\");\r",
							"} else {\r",
							"    let aliases = JSON.parse(aliasesString);\r",
							"\r",
							"//    console.log(\"Parsed aliases Postman variable: \" + JSON.stringify(aliases));\r",
							"\r",
							"    if (aliases.length === 0) {\r",
							"        postman.setNextRequest(\"Get all Applications\");\r",
							"    } else {\r",
							"        let alias = aliases.shift();\r",
							"        let aliasId = alias.id;\r",
							"        let aliasContent = alias.content;\r",
							"\r",
							"        aliasesString = JSON.stringify(aliases);\r",
							"        let aliasContentString = JSON.stringify(aliasContent);\r",
							"\r",
							"        console.log(\"Update alias\");\r",
							"        console.log(\"ID: \" + aliasId);\r",
							"        console.log(\"Name: \" + aliasContent.name);\r",
							"        console.log(\"Description: \" + aliasContent.description);\r",
							"\r",
							"        pm.globals.set(\"remainingAliases\", aliasesString);\r",
							"        pm.globals.set(\"aliasContent\", aliasContentString);\r",
							"        pm.globals.set(\"aliasId\", aliasId);\r",
							"        \r",
							"        postman.setNextRequest(\"Update one Alias\");\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"id": "c2a4c9aa-ea59-470f-bee3-c1c20b0aaf3a"
					}
				}
			],
			"id": "20de7eac-4de9-4b98-87d7-98b0bd4df3ec",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{aliasContent}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/alias/{{aliasId}}",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"alias",
						"{{aliasId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Applications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(null);\r",
							"\r",
							"let apiResponse=JSON.parse(responseBody);\r",
							"let applications = apiResponse.applications;\r",
							"if (applications === undefined || applications === null || applications.length === 0) {\r",
							"    postman.setNextRequest(\"Get all Strategies\");\r",
							"} else {\r",
							"    let applicationsToBeDeleted = applications.filter(function(application, index, arr){ \r",
							"        return !application.name.endsWith(\"_DEV\");\r",
							"    });\r",
							"    if (applicationsToBeDeleted.length === 0) {\r",
							"        let applicationsToBeUnsuspended = applications.filter(function(application, index, arr){ \r",
							"            return (application.isSuspended === true);\r",
							"        });\r",
							"        if (applicationsToBeUnsuspended.length === 0) {\r",
							"            postman.setNextRequest(\"Get all Strategies\");\r",
							"        } else {\r",
							"            pm.globals.set(\"applicationId\", applicationsToBeUnsuspended[0].id);\r",
							"\r",
							"            console.log(\"Unsuspend application\");\r",
							"            console.log(\"ID: \" + applicationsToBeUnsuspended[0].id);\r",
							"            console.log(\"Name: \" + applicationsToBeUnsuspended[0].name);\r",
							"            console.log(\"Version: \" + applicationsToBeUnsuspended[0].version);\r",
							"\r",
							"            postman.setNextRequest(\"Unsuspend one Application\");\r",
							"        }\r",
							"    } else {\r",
							"        pm.globals.set(\"applicationId\", applicationsToBeDeleted[0].id);\r",
							"\r",
							"        console.log(\"Delete application\");\r",
							"        console.log(\"ID: \" + applicationsToBeDeleted[0].id);\r",
							"        console.log(\"Name: \" + applicationsToBeDeleted[0].name);\r",
							"        console.log(\"Version: \" + applicationsToBeDeleted[0].version);\r",
							"\r",
							"        postman.setNextRequest(\"Delete one Application\");\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"id": "823d421a-adf4-4b55-bc39-0dd85acec4cb"
					}
				}
			],
			"id": "96c22b4c-b45d-44ec-8f29-8cfac8f3692a",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/applications",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"applications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete one Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(null);\r",
							"\r",
							"if (pm.response.code === 204) {\r",
							"    postman.setNextRequest(\"Get all Applications\");\r",
							"}"
						],
						"type": "text/javascript",
						"id": "672f2178-b028-4671-b78e-9ae774898268"
					}
				}
			],
			"id": "accc1400-5215-4427-a15f-07e786222b78",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/applications/{{applicationId}}",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"applications",
						"{{applicationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Unsuspend one Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(null);\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"    postman.setNextRequest(\"Get all Applications\");\r",
							"}"
						],
						"type": "text/javascript",
						"id": "6da78ab1-d76e-4502-9820-9abe17770f5f"
					}
				}
			],
			"id": "b455f514-568e-4e2b-b479-a2be42517c4f",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"isSuspended\": false}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/applications/{{applicationId}}",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"applications",
						"{{applicationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Strategies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(null);\r",
							"\r",
							"let apiResponse=JSON.parse(responseBody);\r",
							"let strategies = apiResponse.strategies;\r",
							"if (strategies === undefined || strategies === null || strategies.length === 0) {\r",
							"    postman.setNextRequest(\"Get all APIs\"); //es ist nichts zu tun, keine strategies vorhanden\r",
							"} else {\r",
							"    //strategies[0] wird hier behandelt, alle weiteren müssen an den nächsten request weitergereicht werden.\r",
							"    let remainingStrategies = [];\r",
							"    for (var i=1; i<strategies.length; i++) { \r",
							"        remainingStrategies.push(strategies[i])\r",
							"    }    \r",
							"    pm.globals.set(\"remainingStrategies\", JSON.stringify(remainingStrategies))\r",
							"    \r",
							"    console.log(\"Sanitize strategy - remove dcrConfig.ClientId and dcrConfig.clientSecret\");\r",
							"    console.log(\"ID: \" + strategies[0].id);\r",
							"    console.log(\"Name: \" + strategies[0].name);\r",
							"    console.log(\"Decription: \" + strategies[0].description);        \r",
							"    delete strategies[0].dcrConfig.clientId;\r",
							"    delete strategies[0].dcrConfig.clientSecret;\r",
							"\r",
							"    pm.globals.set(\"strategyContent\", JSON.stringify(strategies[0]));\r",
							"    pm.globals.set(\"strategyId\", strategies[0].id)\r",
							"    \r",
							"    postman.setNextRequest(\"Update one Strategy\");\r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"id": "2c9190c4-31d8-429d-8e70-e81c10a1dbfc"
					}
				}
			],
			"id": "e047d338-6483-485e-819c-8b96a6f2e163",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/strategies",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"strategies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update one Strategy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let strategies = JSON.parse(pm.variables.get(\"remainingStrategies\"));\r",
							"\r",
							"if (strategies === undefined || strategies === null || strategies.length === 0) {\r",
							"    postman.setNextRequest(\"Get all APIs\"); //es ist nichts (mehr) zu tun, alle strategies wurden abgearbeitet\r",
							"} else {\r",
							"    //strategies[0] wird hier behandelt, alle weiteren müssen an den nächsten request weitergereicht werden.\r",
							"    let remainingStrategies = [];\r",
							"    for (var i=1; i<strategies.length; i++) { \r",
							"        remainingStrategies.push(strategies[i])\r",
							"    }    \r",
							"    pm.globals.set(\"remainingStrategies\", JSON.stringify(remainingStrategies))\r",
							"    \r",
							"    console.log(\"Sanitize strategy - remove dcrConfig.ClientId and dcrConfig.clientSecret\");\r",
							"    console.log(\"ID: \" + strategies[0].id);\r",
							"    console.log(\"Name: \" + strategies[0].name);\r",
							"    console.log(\"Decription: \" + strategies[0].description);        \r",
							"    delete strategies[0].dcrConfig.clientId;\r",
							"    delete strategies[0].dcrConfig.clientSecret;\r",
							"\r",
							"    pm.globals.set(\"strategyContent\", JSON.stringify(strategies[0]));\r",
							"    pm.globals.set(\"strategyId\", strategies[0].id)\r",
							"    \r",
							"    postman.setNextRequest(\"Update one Strategy\");\r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"id": "33fe6734-447b-44bf-9ca9-cf859f835a57"
					}
				}
			],
			"id": "59cf789d-93c5-48e9-b563-63ad68b00bf7",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{strategyContent}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/strategies/{{strategyId}}",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"strategies",
						"{{strategyId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all APIs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(null);\r",
							"\r",
							"let apis = JSON.parse(responseBody).apiResponse;\r",
							"if (apis === undefined || apis === null || apis.length === 0 || apis[0].responseStatus === \"NOT_FOUND\") {\r",
							"    postman.setNextRequest(null);\r",
							"} else {\r",
							"    let apiIds = apis.map(api => api.api.id);\r",
							"    let apiId = apiIds.pop();\r",
							"    let apiIdsString = JSON.stringify(apiIds);\r",
							"    pm.globals.set(\"apiIds\", apiIdsString);\r",
							"    pm.globals.set(\"apiId\", apiId);\r",
							"    postman.setNextRequest(\"Get and Validate one API\");\r",
							"}"
						],
						"type": "text/javascript",
						"id": "e2c4d332-dd1b-4249-a886-8c3a125aab09"
					}
				}
			],
			"id": "b5344228-8ea4-40d9-b9d8-b84a468d0884",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/apis",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"apis"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get and Validate one API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"postman.setNextRequest(null);\r",
							"\r",
							"let api = JSON.parse(responseBody).apiResponse.api;\r",
							"if (api === undefined || api === null || api.apiDefinition === undefined || api.apiDefinition === null) {\r",
							"    postman.setNextRequest(null);\r",
							"} else {\r",
							"    if (api.apiGroups === undefined || api.apiGroups === null || api.apiGroups.length === 0) { // API invalid\r",
							"        console.log(\"API must be assigned to one or more API groups\");\r",
							"        console.log(\"ID: \" + api.id);\r",
							"        console.log(\"Name: \" + api.apiName);\r",
							"        console.log(\"Version: \" + api.apiVersion);\r",
							"        console.log(\"Description: \" + api.apiDescription);\r",
							"\r",
							"        pm.test(\"API assigned to one or more API groups\", function () {\r",
							"            pm.expect.fail(\"API not assigned to an API group\");\r",
							"        });\r",
							"\r",
							"        postman.setNextRequest(null);\r",
							"    } else if (api.apiGroups === undefined || api.apiGroups === null || !api.apiGroups.includes(\"Internal\")) { // API invalid\r",
							"        console.log(\"API must be assigned to API group Internal\");\r",
							"        console.log(\"ID: \" + api.id);\r",
							"        console.log(\"Name: \" + api.apiName);\r",
							"        console.log(\"Version: \" + api.apiVersion);\r",
							"        console.log(\"Description: \" + api.apiDescription);\r",
							"\r",
							"        pm.test(\"API assigned to API group Internal\", function () {\r",
							"            pm.expect.fail(\"API not assigned to API group Internal\");\r",
							"        });\r",
							"\r",
							"        postman.setNextRequest(null);\r",
							"    } else { // API valid\r",
							"        api.apiDefinition.tags = api.apiDefinition.tags || [];\r",
							"        api.apiDefinition.tags.push({\"name\":\"BuildId:{{buildId}}\"});\r",
							"        api.apiDefinition.tags.push({\"name\":\"BuildNumber:{{buildNumber}}\"});\r",
							"        api.apiDefinition.tags.push({\"name\":\"PipelineName:{{definitionName}}\"});\r",
							"//      api.apiDefinition.tags.push({\"name\":\"PipelineVersion:{{definitionVersion}}\"});\r",
							"        api.apiDefinition.apiTags = api.apiDefinition.apiTags || [];\r",
							"        api.apiDefinition.apiTags.push(\"BuildId:{{buildId}}\");\r",
							"        api.apiDefinition.apiTags.push(\"BuildNumber:{{buildNumber}}\");\r",
							"        api.apiDefinition.apiTags.push(\"PipelineName:{{definitionName}}\");\r",
							"//      api.apiDefinition.apiTags.push(\"PipelineVersion:{{definitionVersion}}\");\r",
							"        let apiString = JSON.stringify(api);\r",
							"        pm.globals.set(\"api\", apiString);\r",
							"\r",
							"        console.log(\"Update API\");\r",
							"        console.log(\"ID: \" + api.id);\r",
							"        console.log(\"Name: \" + api.apiName);\r",
							"        console.log(\"Version: \" + api.apiVersion);\r",
							"\r",
							"        postman.setNextRequest(\"Update one API\");\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript",
						"id": "665f5a63-18ac-474c-92fb-839b57950b14"
					}
				}
			],
			"id": "871e4d7e-6a2c-477e-b036-af87ce2230bd",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/apis/{{apiId}}",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"apis",
						"{{apiId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update one API",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains apiResponse\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains api\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse.api).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains apiDefinition\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse.api.apiDefinition).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains tags\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse.api.apiDefinition.tags).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains apiTags\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.apiResponse.api.apiDefinition.apiTags).to.exist;\r",
							"});\r",
							"\r",
							"console.log(\"tags set to: \" + JSON.stringify(pm.response.json().apiResponse.api.apiDefinition.tags));\r",
							"console.log(\"apiTags set to: \" + JSON.stringify(pm.response.json().apiResponse.api.apiDefinition.apiTags));\r",
							"\r",
							"postman.setNextRequest(null);\r",
							"\r",
							"let apiIds = JSON.parse(pm.globals.get(\"apiIds\"));\r",
							"if (apiIds === undefined || apiIds === null || apiIds.length === 0) {\r",
							"    postman.setNextRequest(null);\r",
							"} else {\r",
							"    let apiId = apiIds.pop();\r",
							"    let apiIdsString = JSON.stringify(apiIds);\r",
							"    pm.globals.set(\"apiIds\", apiIdsString);\r",
							"    pm.globals.set(\"apiId\", apiId);\r",
							"    postman.setNextRequest(\"Get and Validate one API\");\r",
							"}"
						],
						"type": "text/javascript",
						"id": "b3415222-6d5b-4046-a6ac-45fc6b29bffc"
					}
				}
			],
			"id": "d15b815a-af75-4326-bdd5-9efdfd11ca7d",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{api}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/apis/{{apiId}}",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"apis",
						"{{apiId}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{preparer_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{preparer_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "e83866f5-fe55-4e50-9cd9-255176c62c13"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "c88af650-01fc-4c6a-8be9-f3018eec2f78"
			}
		}
	]
}