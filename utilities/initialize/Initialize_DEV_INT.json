{
	"info": {
		"_postman_id": "2c62d221-6eb1-4efb-afb8-d74fed3b2a22",
		"name": "Initialize_DEV_INT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "3558839-2c62d221-6eb1-4efb-afb8-d74fed3b2a22"
	},
	"item": [
		{
			"name": "Put loadbalancer configuration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains httpsUrls\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.httpsUrls).to.exist;\r",
							"});\r",
							"\r",
							"console.log(\"HTTP Loadbalancer URL set to: \" + pm.response.json().httpUrls);\r",
							"\r",
							"console.log(\"HTTPS Loadbalancer URL set to: \" + pm.response.json().httpsUrls);\r",
							"\r",
							"let httpsProxyHost = pm.variables.get(\"https_proxy_host\");\r",
							"let httpsProxyPort = pm.variables.get(\"https_proxy_port\");\r",
							"if (httpsProxyHost == null || httpsProxyHost == undefined || httpsProxyPort == null || httpsProxyPort == undefined) {\r",
							"    postman.setNextRequest(\"Get local OAuth2 Authorization Server alias\");\r",
							"}"
						],
						"type": "text/javascript",
						"id": "f9495334-f8f6-4634-ab9d-76c94f591ba0"
					}
				}
			],
			"id": "39e6aace-ed67-47d4-b5e4-06359b7e5451",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"websocketUrls\": [],\r\n    \"httpsUrls\": [\r\n        \"https://{{api-hostname}}\"\r\n    ],\r\n    \"httpUrls\": [\r\n        \"http://{{api-hostname}}\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/configurations/loadBalancer",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"configurations",
						"loadBalancer"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update HTTPS_Proxy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"id": "51bcc082-2ac0-42d5-b55a-c1ad0e1b6c27"
					}
				}
			],
			"id": "acd9a183-24cc-4378-8f41-542be7a6437b",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"proxyAlias\": \"HTTPS_Proxy\",\r\n    \"host\": \"{{https_proxy_host}}\",\r\n    \"port\": \"{{https_proxy_port}}\",\r\n    \"username\": null,\r\n    \"password\": null,\r\n    \"protocol\": \"HTTPS\",\r\n    \"isDefault\": \"Y\",\r\n    \"status\": \"Enabled\",\r\n    \"ftpType\": \"0\",\r\n    \"socksVersion\": \"5\",\r\n    \"passwordHandle\": null,\r\n    \"caller\": \"Administrator\",\r\n    \"entityId\": \"HTTPS_Proxy\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/is/outboundproxy/HTTPS_Proxy",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"is",
						"outboundproxy",
						"HTTPS_Proxy"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get local OAuth2 Authorization Server alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let alias = JSON.parse(responseBody).alias;\r",
							"if (alias === undefined || alias === null) {\r",
							"    postman.setNextRequest(null);\r",
							"} else {\r",
							"    alias.localIntrospectionConfig = alias.localIntrospectionConfig || {};\r",
							"    alias.localIntrospectionConfig.issuer = \"https://\" + pm.variables.get(\"hostname\");\r",
							"\r",
							"    alias.tokenGeneratorConfig = alias.tokenGeneratorConfig || {};\r",
							"    alias.tokenGeneratorConfig.accessTokenExpInterval = 3600;\r",
							"    alias.tokenGeneratorConfig.authCodeExpInterval = 60;\r",
							"    alias.tokenGeneratorConfig.expiry = 60;\r",
							"    alias.tokenGeneratorConfig.algorithm = \"RS512\";\r",
							"\r",
							"    alias.sslConfig = alias.sslConfig || {};\r",
							"    alias.sslConfig.keyStoreAlias = \"DEFAULT_IS_KEYSTORE\";\r",
							"    alias.sslConfig.keyAlias = \"ssos\";\r",
							"\r",
							"    let aliasString = JSON.stringify(alias);\r",
							"    pm.globals.set(\"alias\", aliasString);\r",
							"    postman.setNextRequest(\"Update local OAuth2 Authorization Server alias\");\r",
							"}"
						],
						"type": "text/javascript",
						"id": "b923a493-194f-45d7-b147-5e2aed7b3f5a"
					}
				}
			],
			"id": "4b8214f2-0961-4936-8554-d44411f19256",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/alias/local",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"alias",
						"local"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update local OAuth2 Authorization Server alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains alias\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.alias).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains localIntrospectionConfig\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.alias.localIntrospectionConfig).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains tokenGeneratorConfig\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.alias.tokenGeneratorConfig).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains sslConfig\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.alias.sslConfig).to.exist;\r",
							"});\r",
							"\r",
							"console.log(\"JWT issuer set to: \" + pm.response.json().alias.localIntrospectionConfig.issuer);\r",
							"console.log(\"JWT access token expiry interval set to: \" + pm.response.json().alias.tokenGeneratorConfig.expiry);\r",
							"console.log(\"JWT signing algorithm set to: \" + pm.response.json().alias.tokenGeneratorConfig.algorithm);\r",
							"console.log(\"JWT keystore alias set to: \" + pm.response.json().alias.sslConfig.keyStoreAlias);\r",
							"console.log(\"JWT key alias set to: \" + pm.response.json().alias.sslConfig.keyAlias);\r",
							"\r",
							"console.log(\"OAuth2 access token expiry interval set to: \" + pm.response.json().alias.tokenGeneratorConfig.accessTokenExpInterval);\r",
							"console.log(\"Auth code expiry interval set to: \" + pm.response.json().alias.tokenGeneratorConfig.authCodeExpInterval);"
						],
						"type": "text/javascript",
						"id": "aac824af-8a62-4431-93c9-4a4539f2f20c"
					}
				}
			],
			"id": "a5568261-ce07-441c-8c4f-d9b22afbceda",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Host",
						"value": "{{hostname}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{alias}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{ip}}:{{port}}/rest/apigateway/alias/local",
					"protocol": "https",
					"host": [
						"{{ip}}"
					],
					"port": "{{port}}",
					"path": [
						"rest",
						"apigateway",
						"alias",
						"local"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{initializer_password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{initializer_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "51a161f7-ef60-4a14-becd-21f594037103"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "086f4709-6e86-4d65-933f-3676a50a40f1"
			}
		}
	]
}