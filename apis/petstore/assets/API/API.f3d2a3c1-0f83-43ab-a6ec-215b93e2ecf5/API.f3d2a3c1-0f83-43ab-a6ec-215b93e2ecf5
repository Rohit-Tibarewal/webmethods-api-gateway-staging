{
  "apiDefinition" : {
    "info" : {
      "description" : "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
      "version" : "1.0",
      "title" : "Petstore_Source",
      "termsOfService" : "http://swagger.io/terms/",
      "contact" : {
        "email" : "apiteam@swagger.io"
      },
      "license" : {
        "name" : "Apache 2.0",
        "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "host" : "playconfig.apigw-aw-eu.webmethods.io",
    "basePath" : "/gateway/Petstore_Source/1.0",
    "tags" : [ {
      "name" : "pet",
      "description" : "Everything about your Pets",
      "externalDocs" : {
        "description" : "Find out more",
        "url" : "http://swagger.io"
      }
    }, {
      "name" : "user",
      "description" : "Operations about user",
      "externalDocs" : {
        "description" : "Find out more about our store",
        "url" : "http://swagger.io"
      }
    } ],
    "schemes" : [ "http" ],
    "security" : [ ],
    "paths" : {
      "/pet" : {
        "put" : {
          "tags" : [ "pet" ],
          "summary" : "Update an existing pet",
          "description" : "",
          "operationId" : "updatePet",
          "consumes" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied"
            },
            "404" : {
              "description" : "Pet not found"
            },
            "405" : {
              "description" : "Validation exception"
            }
          },
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "description" : "Pet object that needs to be added to the store",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              }
            },
            "required" : true
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Add a new pet to the store",
          "description" : "",
          "operationId" : "addPet",
          "consumes" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "405" : {
              "description" : "Invalid input"
            }
          },
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "description" : "Pet object that needs to be added to the store",
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                }
              }
            },
            "required" : true
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/user/{username}" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Get user by user name",
          "description" : "",
          "operationId" : "getUserByName",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "description" : "The name that needs to be fetched. Use user1 for testing. ",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "username",
            "description" : "The name that needs to be fetched. Use user1 for testing. ",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid username supplied"
            },
            "404" : {
              "description" : "User not found"
            }
          },
          "enabled" : true,
          "scopes" : [ ]
        },
        "put" : {
          "tags" : [ "user" ],
          "summary" : "Updated user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "updateUser",
          "consumes" : [ "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "description" : "name that need to be updated",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "username",
            "description" : "name that need to be updated",
            "required" : true
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid user supplied"
            },
            "404" : {
              "description" : "User not found"
            }
          },
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "description" : "Updated user object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "required" : true
          }
        },
        "delete" : {
          "tags" : [ "user" ],
          "summary" : "Delete user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "deleteUser",
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "description" : "The name that needs to be deleted",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "username",
            "description" : "The name that needs to be deleted",
            "required" : true
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid username supplied"
            },
            "404" : {
              "description" : "User not found"
            }
          },
          "enabled" : true,
          "scopes" : [ ]
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/pet/findByStatus" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by status",
          "description" : "Multiple status values can be provided with comma separated strings",
          "operationId" : "findPetsByStatus",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "query",
            "parameterSchema" : {
              "description" : "Status values that need to be considered for filter",
              "readOnly" : false,
              "type" : "array",
              "items" : {
                "default" : "available",
                "type" : "string",
                "enum" : [ "available", "pending", "sold" ]
              }
            },
            "name" : "status",
            "description" : "Status values that need to be considered for filter",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Pet"
                    }
                  }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Pet"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid status value"
            }
          },
          "enabled" : true,
          "scopes" : [ ]
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/user/createWithList" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "description" : "",
          "operationId" : "createUsersWithListInput",
          "consumes" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation"
            }
          },
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "description" : "List of user object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            },
            "required" : true
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/pet/{petId}/uploadImage" : {
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "uploads an image",
          "description" : "",
          "operationId" : "uploadFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "ID of pet to update",
              "readOnly" : false,
              "type" : "integer"
            },
            "name" : "petId",
            "description" : "ID of pet to update",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApiResponse"
                  }
                }
              }
            }
          },
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "file" : {
                      "type" : "string",
                      "description" : "file to upload",
                      "format" : "binary",
                      "readOnly" : false
                    },
                    "additionalMetadata" : {
                      "type" : "string",
                      "description" : "Additional data to pass to server",
                      "readOnly" : false
                    }
                  }
                }
              }
            },
            "required" : true
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/store/inventory" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Returns pet inventories by status",
          "description" : "Returns a map of status codes to quantities",
          "operationId" : "getInventory",
          "produces" : [ "application/json" ],
          "responses" : {
            "200" : {
              "description" : "successful operation"
            }
          },
          "enabled" : true
        },
        "parameters" : [ ],
        "enabled" : true
      },
      "/user/login" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs user into the system",
          "description" : "",
          "operationId" : "loginUser",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "query",
            "parameterSchema" : {
              "description" : "The user name for login",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "username",
            "description" : "The user name for login",
            "required" : true
          }, {
            "in" : "query",
            "parameterSchema" : {
              "description" : "The password for login in clear text",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "password",
            "description" : "The password for login in clear text",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "headersV3" : {
                "X-Rate-Limit" : {
                  "in" : "header",
                  "description" : "calls per hour allowed by the user",
                  "required" : false,
                  "parameterSchema" : {
                    "type" : "integer",
                    "format" : "int32"
                  }
                },
                "X-Expires-After" : {
                  "in" : "header",
                  "description" : "date in UTC when token expires",
                  "required" : false,
                  "parameterSchema" : {
                    "type" : "string",
                    "format" : "date-time"
                  }
                }
              },
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "string"
                  }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "string"
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid username/password supplied"
            }
          },
          "enabled" : true,
          "scopes" : [ ]
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/user" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Create user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "createUser",
          "consumes" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation"
            }
          },
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "description" : "Created user object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "required" : true
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/user/createWithArray" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "description" : "",
          "operationId" : "createUsersWithArrayInput",
          "consumes" : [ "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "default" : {
              "description" : "successful operation"
            }
          },
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "description" : "List of user object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            },
            "required" : true
          }
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/pet/findByTags" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by tags",
          "description" : "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId" : "findPetsByTags",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "query",
            "parameterSchema" : {
              "description" : "Tags to filter by",
              "readOnly" : false,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "name" : "tags",
            "description" : "Tags to filter by",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Pet"
                    }
                  }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Pet"
                    }
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid tag value"
            }
          },
          "deprecated" : true,
          "enabled" : true,
          "scopes" : [ ]
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/store/order" : {
        "post" : {
          "tags" : [ "store" ],
          "summary" : "Place an order for a pet",
          "description" : "",
          "operationId" : "placeOrder",
          "consumes" : [ "application/json" ],
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid Order"
            }
          },
          "enabled" : true,
          "requestBody" : {
            "description" : "order placed for purchasing the pet",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            },
            "required" : true
          }
        },
        "parameters" : [ ],
        "enabled" : true
      },
      "/user/logout" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs out current logged in user session",
          "description" : "",
          "operationId" : "logoutUser",
          "responses" : {
            "default" : {
              "description" : "successful operation"
            }
          },
          "enabled" : true,
          "scopes" : [ ]
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/pet/{petId}" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Find pet by ID",
          "description" : "Returns a single pet",
          "operationId" : "getPetById",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "ID of pet to return",
              "readOnly" : false,
              "type" : "integer"
            },
            "name" : "petId",
            "description" : "ID of pet to return",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid ID supplied"
            },
            "404" : {
              "description" : "Pet not found"
            }
          },
          "enabled" : true,
          "scopes" : [ ]
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Updates a pet in the store with form data",
          "description" : "",
          "operationId" : "updatePetWithForm",
          "consumes" : [ "application/x-www-form-urlencoded" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "ID of pet that needs to be updated",
              "readOnly" : false,
              "type" : "integer"
            },
            "name" : "petId",
            "description" : "ID of pet that needs to be updated",
            "required" : true
          } ],
          "responses" : {
            "405" : {
              "description" : "Invalid input"
            }
          },
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "type" : "string",
                      "description" : "Updated name of the pet",
                      "readOnly" : false
                    },
                    "status" : {
                      "type" : "string",
                      "description" : "Updated status of the pet",
                      "readOnly" : false
                    }
                  }
                }
              }
            },
            "required" : true
          }
        },
        "delete" : {
          "tags" : [ "pet" ],
          "summary" : "Deletes a pet",
          "description" : "",
          "operationId" : "deletePet",
          "parameters" : [ {
            "in" : "header",
            "parameterSchema" : {
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "api_key",
            "required" : false
          }, {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "Pet id to delete",
              "readOnly" : false,
              "type" : "integer"
            },
            "name" : "petId",
            "description" : "Pet id to delete",
            "required" : true
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied"
            },
            "404" : {
              "description" : "Pet not found"
            }
          },
          "enabled" : true,
          "scopes" : [ ]
        },
        "parameters" : [ ],
        "scopes" : [ ],
        "enabled" : true
      },
      "/store/order/{orderId}" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Find purchase order by ID",
          "description" : "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "operationId" : "getOrderById",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "maximum" : 10,
              "description" : "ID of pet that needs to be fetched",
              "readOnly" : false,
              "type" : "integer",
              "minimum" : 1
            },
            "name" : "orderId",
            "description" : "ID of pet that needs to be fetched",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  }
                }
              }
            },
            "400" : {
              "description" : "Invalid ID supplied"
            },
            "404" : {
              "description" : "Order not found"
            }
          },
          "enabled" : true
        },
        "delete" : {
          "tags" : [ "store" ],
          "summary" : "Delete purchase order by ID",
          "description" : "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId" : "deleteOrder",
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "ID of the order that needs to be deleted",
              "readOnly" : false,
              "type" : "integer",
              "minimum" : 1
            },
            "name" : "orderId",
            "description" : "ID of the order that needs to be deleted",
            "required" : true
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied"
            },
            "404" : {
              "description" : "Order not found"
            }
          },
          "enabled" : true
        },
        "parameters" : [ ],
        "enabled" : true
      }
    },
    "securityDefinitions" : { },
    "definitions" : { },
    "baseUriParameters" : [ ],
    "externalDocs" : [ {
      "description" : "Find out more about Swagger",
      "url" : "http://swagger.io"
    } ],
    "servers" : [ {
      "url" : "http://playconfig.apigw-aw-eu.webmethods.io/gateway/Petstore_Source/1.0"
    } ],
    "components" : {
      "schemas" : {
        "Order" : {
          "type" : "object",
          "properties" : {
            "petId" : {
              "type" : "integer",
              "format" : "int64"
            },
            "quantity" : {
              "type" : "integer",
              "format" : "int32"
            },
            "id" : {
              "type" : "integer",
              "format" : "int64"
            },
            "shipDate" : {
              "type" : "string",
              "format" : "date-time"
            },
            "complete" : {
              "type" : "boolean"
            },
            "status" : {
              "type" : "string",
              "description" : "Order Status",
              "enum" : [ "placed", "approved", "delivered" ]
            }
          },
          "xml" : {
            "name" : "Order"
          }
        },
        "Category" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "xml" : {
            "name" : "Category"
          }
        },
        "User" : {
          "type" : "object",
          "properties" : {
            "firstName" : {
              "type" : "string"
            },
            "lastName" : {
              "type" : "string"
            },
            "password" : {
              "type" : "string"
            },
            "userStatus" : {
              "type" : "integer",
              "description" : "User Status",
              "format" : "int32"
            },
            "phone" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer",
              "format" : "int64"
            },
            "email" : {
              "type" : "string"
            },
            "username" : {
              "type" : "string"
            }
          },
          "xml" : {
            "name" : "User"
          }
        },
        "Tag" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "id" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "xml" : {
            "name" : "Tag"
          }
        },
        "ApiResponse" : {
          "type" : "object",
          "properties" : {
            "code" : {
              "type" : "integer",
              "format" : "int32"
            },
            "type" : {
              "type" : "string"
            },
            "message" : {
              "type" : "string"
            }
          }
        },
        "Pet" : {
          "required" : [ "photoUrls", "name" ],
          "type" : "object",
          "properties" : {
            "photoUrls" : {
              "type" : "array",
              "xml" : {
                "wrapped" : true
              },
              "items" : {
                "type" : "string",
                "xml" : {
                  "name" : "photoUrl"
                }
              }
            },
            "name" : {
              "type" : "string",
              "example" : "doggie"
            },
            "id" : {
              "type" : "integer",
              "format" : "int64"
            },
            "category" : {
              "$ref" : "#/components/schemas/Category"
            },
            "tags" : {
              "type" : "array",
              "xml" : {
                "wrapped" : true
              },
              "items" : {
                "$ref" : "#/components/schemas/Tag"
              }
            },
            "status" : {
              "type" : "string",
              "description" : "pet status in the store",
              "enum" : [ "available", "pending", "sold" ]
            }
          },
          "xml" : {
            "name" : "Pet"
          }
        }
      }
    },
    "type" : "rest"
  },
  "nativeEndpoint" : [ {
    "passSecurityHeaders" : true,
    "uri" : "http://playconfig.apigw-aw-eu.webmethods.io/gateway/Petstore_Source/1.0",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  } ],
  "apiName" : "SwaggerPetstore",
  "apiVersion" : "1.0",
  "apiDescription" : "This is a sample server Petstore server on #{stage_name}#.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "maturityState" : "Experimental",
  "apiGroups" : [ "Internal" ],
  "isActive" : false,
  "type" : "REST",
  "owner" : "Administrator",
  "policies" : [ "479e023e-526e-4bd7-a423-fbf092368e13" ],
  "referencedFiles" : {
    "SwaggerPetstore" : "{\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n    \"description\" : \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n    \"version\" : \"1.0\",\n    \"title\" : \"Petstore_Source\",\n    \"termsOfService\" : \"http://swagger.io/terms/\",\n    \"contact\" : {\n      \"email\" : \"apiteam@swagger.io\"\n    },\n    \"license\" : {\n      \"name\" : \"Apache 2.0\",\n      \"url\" : \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"host\" : \"playconfig.apigw-aw-eu.webmethods.io\",\n  \"basePath\" : \"/gateway/Petstore_Source/1.0\",\n  \"tags\" : [ {\n    \"name\" : \"pet\",\n    \"description\" : \"Everything about your Pets\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more\",\n      \"url\" : \"http://swagger.io\"\n    }\n  }, {\n    \"name\" : \"store\",\n    \"description\" : \"Access to Petstore orders\"\n  }, {\n    \"name\" : \"user\",\n    \"description\" : \"Operations about user\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more about our store\",\n      \"url\" : \"http://swagger.io\"\n    }\n  } ],\n  \"schemes\" : [ \"http\" ],\n  \"paths\" : {\n    \"/pet\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Add a new pet to the store\",\n        \"description\" : \"\",\n        \"operationId\" : \"addPet\",\n        \"consumes\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        }\n      },\n      \"put\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Update an existing pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePet\",\n        \"consumes\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          },\n          \"405\" : {\n            \"description\" : \"Validation exception\"\n          }\n        }\n      }\n    },\n    \"/user/{username}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Get user by user name\",\n        \"description\" : \"\",\n        \"operationId\" : \"getUserByName\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        }\n      },\n      \"put\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Updated user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"updateUser\",\n        \"consumes\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"name that need to be updated\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Updated user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid user supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        }\n      },\n      \"delete\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Delete user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"deleteUser\",\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        }\n      }\n    },\n    \"/pet/findByStatus\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by status\",\n        \"description\" : \"Multiple status values can be provided with comma separated strings\",\n        \"operationId\" : \"findPetsByStatus\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"status\",\n          \"in\" : \"query\",\n          \"description\" : \"Status values that need to be considered for filter\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\",\n            \"enum\" : [ \"available\", \"pending\", \"sold\" ],\n            \"default\" : \"available\"\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid status value\"\n          }\n        }\n      }\n    },\n    \"/user/createWithList\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithListInput\",\n        \"consumes\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        }\n      }\n    },\n    \"/pet/{petId}/uploadImage\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"uploads an image\",\n        \"description\" : \"\",\n        \"operationId\" : \"uploadFile\",\n        \"consumes\" : [ \"multipart/form-data\" ],\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to update\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"additionalMetadata\",\n          \"in\" : \"formData\",\n          \"description\" : \"Additional data to pass to server\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"file\",\n          \"in\" : \"formData\",\n          \"description\" : \"file to upload\",\n          \"required\" : false,\n          \"type\" : \"string\",\n          \"format\" : \"binary\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/ApiResponse\"\n            }\n          }\n        }\n      }\n    },\n    \"/store/inventory\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Returns pet inventories by status\",\n        \"description\" : \"Returns a map of status codes to quantities\",\n        \"operationId\" : \"getInventory\",\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\"\n          }\n        }\n      }\n    },\n    \"/user/login\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs user into the system\",\n        \"description\" : \"\",\n        \"operationId\" : \"loginUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"query\",\n          \"description\" : \"The user name for login\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"password\",\n          \"in\" : \"query\",\n          \"description\" : \"The password for login in clear text\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"headers\" : {\n              \"X-Rate-Limit\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\",\n                \"description\" : \"calls per hour allowed by the user\"\n              },\n              \"X-Expires-After\" : {\n                \"type\" : \"string\",\n                \"format\" : \"date-time\",\n                \"description\" : \"date in UTC when token expires\"\n              }\n            },\n            \"schema\" : {\n              \"type\" : \"string\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username/password supplied\"\n          }\n        }\n      }\n    },\n    \"/user\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Create user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"createUser\",\n        \"consumes\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Created user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        }\n      }\n    },\n    \"/user/createWithArray\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithArrayInput\",\n        \"consumes\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        }\n      }\n    },\n    \"/pet/findByTags\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by tags\",\n        \"description\" : \"Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\" : \"findPetsByTags\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"tags\",\n          \"in\" : \"query\",\n          \"description\" : \"Tags to filter by\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\"\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"deprecated\" : true,\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid tag value\"\n          }\n        }\n      }\n    },\n    \"/store/order\" : {\n      \"post\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Place an order for a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"placeOrder\",\n        \"consumes\" : [ \"application/json\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"order placed for purchasing the pet\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Order\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid Order\"\n          }\n        }\n      }\n    },\n    \"/user/logout\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs out current logged in user session\",\n        \"description\" : \"\",\n        \"operationId\" : \"logoutUser\",\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        }\n      }\n    },\n    \"/pet/{petId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Find pet by ID\",\n        \"description\" : \"Returns a single pet\",\n        \"operationId\" : \"getPetById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to return\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Pet\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        }\n      },\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Updates a pet in the store with form data\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePetWithForm\",\n        \"consumes\" : [ \"application/x-www-form-urlencoded\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be updated\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"name\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated name of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"status\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated status of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        }\n      },\n      \"delete\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Deletes a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"deletePet\",\n        \"parameters\" : [ {\n          \"name\" : \"api_key\",\n          \"in\" : \"header\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"Pet id to delete\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        }\n      }\n    },\n    \"/store/order/{orderId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Find purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n        \"operationId\" : \"getOrderById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"orderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be fetched\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"maximum\" : 10,\n          \"minimum\" : 1,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        }\n      },\n      \"delete\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Delete purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n        \"operationId\" : \"deleteOrder\",\n        \"parameters\" : [ {\n          \"name\" : \"orderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of the order that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"minimum\" : 1,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        }\n      }\n    }\n  },\n  \"definitions\" : {\n    \"Order\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"petId\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"quantity\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"shipDate\" : {\n          \"type\" : \"string\",\n          \"format\" : \"date-time\"\n        },\n        \"complete\" : {\n          \"type\" : \"boolean\"\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"Order Status\",\n          \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Order\"\n      }\n    },\n    \"Category\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"name\" : {\n          \"type\" : \"string\"\n        },\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Category\"\n      }\n    },\n    \"User\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"firstName\" : {\n          \"type\" : \"string\"\n        },\n        \"lastName\" : {\n          \"type\" : \"string\"\n        },\n        \"password\" : {\n          \"type\" : \"string\"\n        },\n        \"userStatus\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\",\n          \"description\" : \"User Status\"\n        },\n        \"phone\" : {\n          \"type\" : \"string\"\n        },\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"email\" : {\n          \"type\" : \"string\"\n        },\n        \"username\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"User\"\n      }\n    },\n    \"Tag\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"name\" : {\n          \"type\" : \"string\"\n        },\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Tag\"\n      }\n    },\n    \"ApiResponse\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"code\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"type\" : {\n          \"type\" : \"string\"\n        },\n        \"message\" : {\n          \"type\" : \"string\"\n        }\n      }\n    },\n    \"Pet\" : {\n      \"type\" : \"object\",\n      \"required\" : [ \"name\", \"photoUrls\" ],\n      \"properties\" : {\n        \"photoUrls\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"type\" : \"string\",\n            \"xml\" : {\n              \"name\" : \"photoUrl\"\n            }\n          }\n        },\n        \"name\" : {\n          \"type\" : \"string\",\n          \"example\" : \"doggie\"\n        },\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"category\" : {\n          \"$ref\" : \"#/definitions/Category\"\n        },\n        \"tags\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"$ref\" : \"#/definitions/Tag\"\n          }\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"pet status in the store\",\n          \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Pet\"\n      }\n    }\n  },\n  \"externalDocs\" : {\n    \"description\" : \"Find out more about Swagger\",\n    \"url\" : \"http://swagger.io\"\n  }\n}"
  },
  "tracingEnabled" : false,
  "scopes" : [ ],
  "publishedPortals" : [ ],
  "creationDate" : "2021-03-17 07:22:07 GMT",
  "lastModified" : "2024-04-02 16:07:50 GMT",
  "systemVersion" : 1,
  "gatewayEndpoints" : { },
  "id" : "f3d2a3c1-0f83-43ab-a6ec-215b93e2ecf5",
  "_docType" : "apis"
}