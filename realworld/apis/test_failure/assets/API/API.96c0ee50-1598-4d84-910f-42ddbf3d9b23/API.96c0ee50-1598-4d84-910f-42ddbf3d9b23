{
  "apiDefinition" : {
    "info" : {
      "description" : "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
      "version" : "1.0.0",
      "title" : "Swagger Petstore",
      "termsOfService" : "http://swagger.io/terms/",
      "contact" : {
        "email" : "apiteam@swagger.io"
      },
      "license" : {
        "name" : "Apache 2.0",
        "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "serviceRegistryDisplayName" : "Petstore_Test_Failure_1.0.0",
    "tags" : [ {
      "name" : "pet",
      "description" : "Everything about your Pets",
      "externalDocs" : {
        "description" : "Find out more",
        "url" : "http://swagger.io"
      }
    }, {
      "name" : "store",
      "description" : "Access to Petstore orders"
    }, {
      "name" : "user",
      "description" : "Operations about user",
      "externalDocs" : {
        "description" : "Find out more about our store",
        "url" : "http://swagger.io"
      }
    } ],
    "schemes" : [ ],
    "security" : [ ],
    "paths" : {
      "/pet" : {
        "put" : {
          "tags" : [ "pet" ],
          "summary" : "Update an existing pet",
          "description" : "",
          "operationId" : "updatePet",
          "consumes" : [ "application/json", "application/xml" ],
          "produces" : [ "application/xml", "application/json" ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "405" : {
              "description" : "Validation exception",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              }
            },
            "name" : "updatePet"
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Add a new pet to the store",
          "description" : "",
          "operationId" : "addPet",
          "consumes" : [ "application/json", "application/xml" ],
          "produces" : [ "application/xml", "application/json" ],
          "responses" : {
            "405" : {
              "description" : "Invalid input",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              },
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Pet"
                },
                "examples" : { }
              }
            },
            "name" : "addPet"
          }
        },
        "scopes" : [ ],
        "displayName" : "/pet",
        "enabled" : true
      },
      "/user/{username}" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Get user by user name",
          "description" : "",
          "operationId" : "getUserByName",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "description" : "The name that needs to be fetched. Use user1 for testing. ",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "username",
            "description" : "The name that needs to be fetched. Use user1 for testing. ",
            "type" : "string",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/User"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid username supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getUserByName"
          }
        },
        "put" : {
          "tags" : [ "user" ],
          "summary" : "Updated user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "updateUser",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "description" : "name that need to be updated",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "username",
            "description" : "name that need to be updated",
            "type" : "string",
            "required" : true
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid user supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              }
            },
            "name" : "updateUser"
          }
        },
        "delete" : {
          "tags" : [ "user" ],
          "summary" : "Delete user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "deleteUser",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "description" : "The name that needs to be deleted",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "username",
            "description" : "The name that needs to be deleted",
            "type" : "string",
            "required" : true
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid username supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "User not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deleteUser"
          }
        },
        "scopes" : [ ],
        "displayName" : "/user/{username}",
        "enabled" : true
      },
      "/pet/findByStatus" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by status",
          "description" : "Multiple status values can be provided with comma separated strings",
          "operationId" : "findPetsByStatus",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "default" : "available",
            "in" : "query",
            "parameterSchema" : {
              "description" : "Status values that need to be considered for filter",
              "readOnly" : false,
              "type" : "array",
              "items" : {
                "default" : "available",
                "type" : "string",
                "enum" : [ "available", "pending", "sold" ]
              }
            },
            "name" : "status",
            "description" : "Status values that need to be considered for filter",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid status value",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "findPetsByStatus"
          }
        },
        "scopes" : [ ],
        "displayName" : "/pet/findByStatus",
        "enabled" : true
      },
      "/user/createWithList" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "description" : "",
          "operationId" : "createUsersWithListInput",
          "produces" : [ "application/xml", "application/json" ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/User\"}}"
                },
                "examples" : { }
              }
            },
            "name" : "createUsersWithListInput"
          }
        },
        "scopes" : [ ],
        "displayName" : "/user/createWithList",
        "enabled" : true
      },
      "/pet/{petId}/uploadImage" : {
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "uploads an image",
          "description" : "",
          "operationId" : "uploadFile",
          "consumes" : [ "multipart/form-data" ],
          "produces" : [ "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "ID of pet to update",
              "readOnly" : false,
              "type" : "integer"
            },
            "name" : "petId",
            "format" : "int64",
            "description" : "ID of pet to update",
            "type" : "integer",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApiResponse"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "multipart/form-data" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"object\",\"properties\":{\"additionalMetadata\":{\"type\":\"string\",\"description\":\"Additional data to pass to server\",\"readOnly\":false},\"file\":{\"type\":\"string\",\"description\":\"file to upload\",\"format\":\"binary\",\"readOnly\":false}}}"
                },
                "examples" : { }
              }
            },
            "name" : "uploadFile"
          }
        },
        "scopes" : [ ],
        "displayName" : "/pet/{petId}/uploadImage",
        "enabled" : true
      },
      "/store/inventory" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Returns pet inventories by status",
          "description" : "Returns a map of status codes to quantities",
          "operationId" : "getInventory",
          "produces" : [ "application/json" ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"object\",\"additionalProperties\":{\"type\":\"integer\",\"format\":\"int32\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "api_key" : [ ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getInventory"
          }
        },
        "scopes" : [ ],
        "displayName" : "/store/inventory",
        "enabled" : true
      },
      "/user/login" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs user into the system",
          "description" : "",
          "operationId" : "loginUser",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "query",
            "parameterSchema" : {
              "description" : "The user name for login",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "username",
            "description" : "The user name for login",
            "type" : "string",
            "required" : true
          }, {
            "in" : "query",
            "parameterSchema" : {
              "description" : "The password for login in clear text",
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "password",
            "description" : "The password for login in clear text",
            "type" : "string",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"string\"}"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"string\"}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid username/password supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "loginUser"
          }
        },
        "scopes" : [ ],
        "displayName" : "/user/login",
        "enabled" : true
      },
      "/user" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Create user",
          "description" : "This can only be done by the logged in user.",
          "operationId" : "createUser",
          "produces" : [ "application/xml", "application/json" ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                },
                "examples" : { }
              }
            },
            "name" : "createUser"
          }
        },
        "scopes" : [ ],
        "displayName" : "/user",
        "enabled" : true
      },
      "/user/createWithArray" : {
        "post" : {
          "tags" : [ "user" ],
          "summary" : "Creates list of users with given input array",
          "description" : "",
          "operationId" : "createUsersWithArrayInput",
          "produces" : [ "application/xml", "application/json" ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/User\"}}"
                },
                "examples" : { }
              }
            },
            "name" : "createUsersWithArrayInput"
          }
        },
        "scopes" : [ ],
        "displayName" : "/user/createWithArray",
        "enabled" : true
      },
      "/pet/findByTags" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Finds Pets by tags",
          "description" : "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
          "operationId" : "findPetsByTags",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "query",
            "parameterSchema" : {
              "description" : "Tags to filter by",
              "readOnly" : false,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "name" : "tags",
            "description" : "Tags to filter by",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "type" : "gateway",
                    "schema" : "{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Pet\"}}"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid tag value",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "deprecated" : true,
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "findPetsByTags"
          }
        },
        "scopes" : [ ],
        "displayName" : "/pet/findByTags",
        "enabled" : true
      },
      "/store/order" : {
        "post" : {
          "tags" : [ "store" ],
          "summary" : "Place an order for a pet",
          "description" : "",
          "operationId" : "placeOrder",
          "produces" : [ "application/xml", "application/json" ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid Order",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                },
                "examples" : { }
              }
            },
            "name" : "placeOrder"
          }
        },
        "scopes" : [ ],
        "displayName" : "/store/order",
        "enabled" : true
      },
      "/user/logout" : {
        "get" : {
          "tags" : [ "user" ],
          "summary" : "Logs out current logged in user session",
          "description" : "",
          "operationId" : "logoutUser",
          "produces" : [ "application/xml", "application/json" ],
          "responses" : {
            "default" : {
              "description" : "successful operation",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "logoutUser"
          }
        },
        "scopes" : [ ],
        "displayName" : "/user/logout",
        "enabled" : true
      },
      "/pet/{petId}" : {
        "get" : {
          "tags" : [ "pet" ],
          "summary" : "Find pet by ID",
          "description" : "Returns a single pet",
          "operationId" : "getPetById",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "ID of pet to return",
              "readOnly" : false,
              "type" : "integer"
            },
            "name" : "petId",
            "format" : "int64",
            "description" : "ID of pet to return",
            "type" : "integer",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Pet"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "api_key" : [ ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getPetById"
          }
        },
        "post" : {
          "tags" : [ "pet" ],
          "summary" : "Updates a pet in the store with form data",
          "description" : "",
          "operationId" : "updatePetWithForm",
          "consumes" : [ "application/x-www-form-urlencoded" ],
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "ID of pet that needs to be updated",
              "readOnly" : false,
              "type" : "integer"
            },
            "name" : "petId",
            "format" : "int64",
            "description" : "ID of pet that needs to be updated",
            "type" : "integer",
            "required" : true
          } ],
          "responses" : {
            "405" : {
              "description" : "Invalid input",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : {
              "application/x-www-form-urlencoded" : {
                "schema" : {
                  "type" : "gateway",
                  "schema" : "{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\",\"description\":\"Updated name of the pet\",\"readOnly\":false},\"status\":{\"type\":\"string\",\"description\":\"Updated status of the pet\",\"readOnly\":false}}}"
                },
                "examples" : { }
              }
            },
            "name" : "updatePetWithForm"
          }
        },
        "delete" : {
          "tags" : [ "pet" ],
          "summary" : "Deletes a pet",
          "description" : "",
          "operationId" : "deletePet",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "header",
            "parameterSchema" : {
              "readOnly" : false,
              "type" : "string"
            },
            "name" : "api_key",
            "type" : "string",
            "required" : false
          }, {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "Pet id to delete",
              "readOnly" : false,
              "type" : "integer"
            },
            "name" : "petId",
            "format" : "int64",
            "description" : "Pet id to delete",
            "type" : "integer",
            "required" : true
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Pet not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "security" : [ {
            "petstore_auth" : [ "write:pets", "read:pets" ]
          } ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deletePet"
          }
        },
        "scopes" : [ ],
        "displayName" : "/pet/{petId}",
        "enabled" : true
      },
      "/store/order/{orderId}" : {
        "get" : {
          "tags" : [ "store" ],
          "summary" : "Find purchase order by ID",
          "description" : "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
          "operationId" : "getOrderById",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "maximum" : 10,
              "description" : "ID of pet that needs to be fetched",
              "readOnly" : false,
              "type" : "integer",
              "minimum" : 1
            },
            "name" : "orderId",
            "format" : "int64",
            "description" : "ID of pet that needs to be fetched",
            "type" : "integer",
            "required" : true
          } ],
          "responses" : {
            "200" : {
              "description" : "successful operation",
              "content" : {
                "application/xml" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                },
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/Order"
                  },
                  "examples" : { }
                }
              },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Order not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "getOrderById"
          }
        },
        "delete" : {
          "tags" : [ "store" ],
          "summary" : "Delete purchase order by ID",
          "description" : "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
          "operationId" : "deleteOrder",
          "produces" : [ "application/xml", "application/json" ],
          "parameters" : [ {
            "in" : "path",
            "parameterSchema" : {
              "format" : "int64",
              "description" : "ID of the order that needs to be deleted",
              "readOnly" : false,
              "type" : "integer",
              "minimum" : 1
            },
            "name" : "orderId",
            "format" : "int64",
            "description" : "ID of the order that needs to be deleted",
            "type" : "integer",
            "required" : true
          } ],
          "responses" : {
            "400" : {
              "description" : "Invalid ID supplied",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            },
            "404" : {
              "description" : "Order not found",
              "content" : { },
              "links" : { },
              "schema" : { },
              "examples" : { },
              "headers" : { }
            }
          },
          "mockedResponses" : { },
          "mockedConditionsBasedCustomResponsesList" : [ ],
          "enabled" : true,
          "scopes" : [ ],
          "requestBody" : {
            "content" : { },
            "name" : "deleteOrder"
          }
        },
        "scopes" : [ ],
        "displayName" : "/store/order/{orderId}",
        "enabled" : true
      }
    },
    "securityDefinitions" : {
      "petstore_auth" : {
        "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
        "scopes" : {
          "write:pets" : "modify pets in your account",
          "read:pets" : "read your pets"
        },
        "type" : "oauth2",
        "flow" : "implicit"
      },
      "api_key" : {
        "in" : "header",
        "name" : "api_key",
        "type" : "apiKey"
      }
    },
    "definitions" : { },
    "parameters" : { },
    "baseUriParameters" : [ ],
    "externalDocs" : [ {
      "description" : "Find out more about Swagger",
      "url" : "http://swagger.io"
    } ],
    "servers" : [ {
      "url" : "https://petstore.swagger.io/v2",
      "variables" : { }
    }, {
      "url" : "http://petstore.swagger.io/v2",
      "variables" : { }
    } ],
    "components" : {
      "schemas" : {
        "Order" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"complete\":{\"type\":\"boolean\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"petId\":{\"type\":\"integer\",\"format\":\"int64\"},\"quantity\":{\"type\":\"integer\",\"format\":\"int32\"},\"shipDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"status\":{\"type\":\"string\",\"description\":\"Order Status\",\"enum\":[\"placed\",\"approved\",\"delivered\"]}},\"xml\":{\"name\":\"Order\"}}"
        },
        "Category" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"Category\"}}"
        },
        "User" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"firstName\":{\"type\":\"string\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"lastName\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"},\"phone\":{\"type\":\"string\"},\"userStatus\":{\"type\":\"integer\",\"description\":\"User Status\",\"format\":\"int32\"},\"username\":{\"type\":\"string\"}},\"xml\":{\"name\":\"User\"}}"
        },
        "Tag" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\"}},\"xml\":{\"name\":\"Tag\"}}"
        },
        "ApiResponse" : {
          "type" : "gateway",
          "schema" : "{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"integer\",\"format\":\"int32\"},\"message\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}}}"
        },
        "Pet" : {
          "type" : "gateway",
          "schema" : "{\"required\":[\"photoUrls\",\"name\"],\"type\":\"object\",\"properties\":{\"category\":{\"$ref\":\"#/components/schemas/Category\"},\"id\":{\"type\":\"integer\",\"format\":\"int64\"},\"name\":{\"type\":\"string\",\"example\":\"doggie\"},\"photoUrls\":{\"type\":\"array\",\"xml\":{\"name\":\"photoUrl\",\"wrapped\":true},\"items\":{\"type\":\"string\"}},\"status\":{\"type\":\"string\",\"description\":\"pet status in the store\",\"enum\":[\"available\",\"pending\",\"sold\"]},\"tags\":{\"type\":\"array\",\"xml\":{\"name\":\"tag\",\"wrapped\":true},\"items\":{\"$ref\":\"#/components/schemas/Tag\"}}},\"example\":\"{\\\"id\\\":0,\\\"category\\\":{\\\"id\\\":1,\\\"name\\\":\\\"Cat\\\"},\\\"name\\\":\\\"Kitty\\\",\\\"photoUrls\\\":[\\\"https://pixabay.com/photos/kitty-cat-kitten-pet-animal-cute-551554/\\\"],\\\"tags\\\":[{\\\"id\\\":0,\\\"name\\\":\\\"Kitty\\\"},{\\\"id\\\":1,\\\"name\\\":\\\"Cat\\\"},{\\\"id\\\":2,\\\"name\\\":\\\"Kitten\\\"}],\\\"status\\\":\\\"available\\\"}\",\"xml\":{\"name\":\"Pet\"}}"
        }
      },
      "responses" : { },
      "parameters" : { },
      "examples" : { },
      "requestBodies" : { },
      "headers" : { },
      "links" : { },
      "callbacks" : { }
    },
    "type" : "rest"
  },
  "nativeEndpoint" : [ {
    "passSecurityHeaders" : true,
    "uri" : "https://petstore.swagger.io/v2",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  }, {
    "passSecurityHeaders" : true,
    "uri" : "http://petstore.swagger.io/v2",
    "connectionTimeoutDuration" : 0,
    "alias" : false
  } ],
  "apiName" : "Petstore_Test_Failure",
  "apiVersion" : "1.0",
  "apiDescription" : "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
  "maturityState" : "Beta",
  "apiGroups" : [ "Internal" ],
  "isActive" : true,
  "type" : "REST",
  "owner" : "Administrator",
  "policies" : [ "82b07bba-9376-4f99-92c8-b928b4a7971f" ],
  "referencedFiles" : {
    "Petstore_Swagger_For_Walkthrough.yaml" : "swagger: '2.0'\r\ninfo:\r\n  description: >-\r\n    This is a sample server Petstore server.  You can find out more about    \r\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\r\n    #swagger](http://swagger.io/irc/).      For this sample, you can use the api\r\n    key `special-key` to test the authorization     filters.\r\n  version: 1.0.0\r\n  title: Swagger Petstore\r\n  termsOfService: 'http://swagger.io/terms/'\r\n  contact:\r\n    email: apiteam@swagger.io\r\n  license:\r\n    name: Apache 2.0\r\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\r\nhost: petstore.swagger.io\r\nbasePath: /v2\r\ntags:\r\n  - name: pet\r\n    description: Everything about your Pets\r\n    externalDocs:\r\n      description: Find out more\r\n      url: 'http://swagger.io'\r\n  - name: store\r\n    description: Access to Petstore orders\r\n  - name: user\r\n    description: Operations about user\r\n    externalDocs:\r\n      description: Find out more about our store\r\n      url: 'http://swagger.io'\r\nschemes:\r\n  - https\r\n  - http\r\npaths:\r\n  /pet:\r\n    post:\r\n      tags:\r\n        - pet\r\n      summary: Add a new pet to the store\r\n      description: ''\r\n      operationId: addPet\r\n      consumes:\r\n        - application/json\r\n        - application/xml\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          description: Pet object that needs to be added to the store\r\n          required: true\r\n          schema:\r\n            $ref: '#/definitions/Pet'\r\n      responses:\r\n        '405':\r\n          description: Invalid input\r\n      security:\r\n        - petstore_auth:\r\n            - 'write:pets'\r\n            - 'read:pets'\r\n    put:\r\n      tags:\r\n        - pet\r\n      summary: Update an existing pet\r\n      description: ''\r\n      operationId: updatePet\r\n      consumes:\r\n        - application/json\r\n        - application/xml\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          description: Pet object that needs to be added to the store\r\n          required: true\r\n          schema:\r\n            $ref: '#/definitions/Pet'\r\n      responses:\r\n        '400':\r\n          description: Invalid ID supplied\r\n        '404':\r\n          description: Pet not found\r\n        '405':\r\n          description: Validation exception\r\n      security:\r\n        - petstore_auth:\r\n            - 'write:pets'\r\n            - 'read:pets'\r\n  /pet/findByStatus:\r\n    get:\r\n      tags:\r\n        - pet\r\n      summary: Finds Pets by status\r\n      description: Multiple status values can be provided with comma separated strings\r\n      operationId: findPetsByStatus\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: status\r\n          in: query\r\n          description: Status values that need to be considered for filter\r\n          required: true\r\n          type: array\r\n          items:\r\n            type: string\r\n            enum:\r\n              - available\r\n              - pending\r\n              - sold\r\n            default: available\r\n          collectionFormat: multi\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: '#/definitions/Pet'\r\n        '400':\r\n          description: Invalid status value\r\n      security:\r\n        - petstore_auth:\r\n            - 'write:pets'\r\n            - 'read:pets'\r\n  /pet/findByTags:\r\n    get:\r\n      tags:\r\n        - pet\r\n      summary: Finds Pets by tags\r\n      description: >-\r\n        Muliple tags can be provided with comma separated strings. Use        \r\n        tag1, tag2, tag3 for testing.\r\n      operationId: findPetsByTags\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: tags\r\n          in: query\r\n          description: Tags to filter by\r\n          required: true\r\n          type: array\r\n          items:\r\n            type: string\r\n          collectionFormat: multi\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: '#/definitions/Pet'\r\n        '400':\r\n          description: Invalid tag value\r\n      security:\r\n        - petstore_auth:\r\n            - 'write:pets'\r\n            - 'read:pets'\r\n      deprecated: true\r\n  '/pet/{petId}':\r\n    get:\r\n      tags:\r\n        - pet\r\n      summary: Find pet by ID\r\n      description: Returns a single pet\r\n      operationId: getPetById\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: petId\r\n          in: path\r\n          description: ID of pet to return\r\n          required: true\r\n          type: integer\r\n          format: int64\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            $ref: '#/definitions/Pet'\r\n        '400':\r\n          description: Invalid ID supplied\r\n        '404':\r\n          description: Pet not found\r\n      security:\r\n        - api_key: []\r\n    post:\r\n      tags:\r\n        - pet\r\n      summary: Updates a pet in the store with form data\r\n      description: ''\r\n      operationId: updatePetWithForm\r\n      consumes:\r\n        - application/x-www-form-urlencoded\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: petId\r\n          in: path\r\n          description: ID of pet that needs to be updated\r\n          required: true\r\n          type: integer\r\n          format: int64\r\n        - name: name\r\n          in: formData\r\n          description: Updated name of the pet\r\n          required: false\r\n          type: string\r\n        - name: status\r\n          in: formData\r\n          description: Updated status of the pet\r\n          required: false\r\n          type: string\r\n      responses:\r\n        '405':\r\n          description: Invalid input\r\n      security:\r\n        - petstore_auth:\r\n            - 'write:pets'\r\n            - 'read:pets'\r\n    delete:\r\n      tags:\r\n        - pet\r\n      summary: Deletes a pet\r\n      description: ''\r\n      operationId: deletePet\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: api_key\r\n          in: header\r\n          required: false\r\n          type: string\r\n        - name: petId\r\n          in: path\r\n          description: Pet id to delete\r\n          required: true\r\n          type: integer\r\n          format: int64\r\n      responses:\r\n        '400':\r\n          description: Invalid ID supplied\r\n        '404':\r\n          description: Pet not found\r\n      security:\r\n        - petstore_auth:\r\n            - 'write:pets'\r\n            - 'read:pets'\r\n  '/pet/{petId}/uploadImage':\r\n    post:\r\n      tags:\r\n        - pet\r\n      summary: uploads an image\r\n      description: ''\r\n      operationId: uploadFile\r\n      consumes:\r\n        - multipart/form-data\r\n      produces:\r\n        - application/json\r\n      parameters:\r\n        - name: petId\r\n          in: path\r\n          description: ID of pet to update\r\n          required: true\r\n          type: integer\r\n          format: int64\r\n        - name: additionalMetadata\r\n          in: formData\r\n          description: Additional data to pass to server\r\n          required: false\r\n          type: string\r\n        - name: file\r\n          in: formData\r\n          description: file to upload\r\n          required: false\r\n          type: file\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            $ref: '#/definitions/ApiResponse'\r\n      security:\r\n        - petstore_auth:\r\n            - 'write:pets'\r\n            - 'read:pets'\r\n  /store/inventory:\r\n    get:\r\n      tags:\r\n        - store\r\n      summary: Returns pet inventories by status\r\n      description: Returns a map of status codes to quantities\r\n      operationId: getInventory\r\n      produces:\r\n        - application/json\r\n      parameters: []\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            type: object\r\n            additionalProperties:\r\n              type: integer\r\n              format: int32\r\n      security:\r\n        - api_key: []\r\n  /store/order:\r\n    post:\r\n      tags:\r\n        - store\r\n      summary: Place an order for a pet\r\n      description: ''\r\n      operationId: placeOrder\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          description: order placed for purchasing the pet\r\n          required: true\r\n          schema:\r\n            $ref: '#/definitions/Order'\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            $ref: '#/definitions/Order'\r\n        '400':\r\n          description: Invalid Order\r\n  '/store/order/{orderId}':\r\n    get:\r\n      tags:\r\n        - store\r\n      summary: Find purchase order by ID\r\n      description: >-\r\n        For valid response try integer IDs with value >= 1 and <= 10.        \r\n        Other values will generated exceptions\r\n      operationId: getOrderById\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: orderId\r\n          in: path\r\n          description: ID of pet that needs to be fetched\r\n          required: true\r\n          type: integer\r\n          maximum: 10\r\n          minimum: 1\r\n          format: int64\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            $ref: '#/definitions/Order'\r\n        '400':\r\n          description: Invalid ID supplied\r\n        '404':\r\n          description: Order not found\r\n    delete:\r\n      tags:\r\n        - store\r\n      summary: Delete purchase order by ID\r\n      description: >-\r\n        For valid response try integer IDs with positive integer value.        \r\n        Negative or non-integer values will generate API errors\r\n      operationId: deleteOrder\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: orderId\r\n          in: path\r\n          description: ID of the order that needs to be deleted\r\n          required: true\r\n          type: integer\r\n          minimum: 1\r\n          format: int64\r\n      responses:\r\n        '400':\r\n          description: Invalid ID supplied\r\n        '404':\r\n          description: Order not found\r\n  /user:\r\n    post:\r\n      tags:\r\n        - user\r\n      summary: Create user\r\n      description: This can only be done by the logged in user.\r\n      operationId: createUser\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          description: Created user object\r\n          required: true\r\n          schema:\r\n            $ref: '#/definitions/User'\r\n      responses:\r\n        default:\r\n          description: successful operation\r\n  /user/createWithArray:\r\n    post:\r\n      tags:\r\n        - user\r\n      summary: Creates list of users with given input array\r\n      description: ''\r\n      operationId: createUsersWithArrayInput\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          description: List of user object\r\n          required: true\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: '#/definitions/User'\r\n      responses:\r\n        default:\r\n          description: successful operation\r\n  /user/createWithList:\r\n    post:\r\n      tags:\r\n        - user\r\n      summary: Creates list of users with given input array\r\n      description: ''\r\n      operationId: createUsersWithListInput\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          description: List of user object\r\n          required: true\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: '#/definitions/User'\r\n      responses:\r\n        default:\r\n          description: successful operation\r\n  /user/login:\r\n    get:\r\n      tags:\r\n        - user\r\n      summary: Logs user into the system\r\n      description: ''\r\n      operationId: loginUser\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: username\r\n          in: query\r\n          description: The user name for login\r\n          required: true\r\n          type: string\r\n        - name: password\r\n          in: query\r\n          description: The password for login in clear text\r\n          required: true\r\n          type: string\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            type: string\r\n          headers:\r\n            X-Rate-Limit:\r\n              type: integer\r\n              format: int32\r\n              description: calls per hour allowed by the user\r\n            X-Expires-After:\r\n              type: string\r\n              format: date-time\r\n              description: date in UTC when token expires\r\n        '400':\r\n          description: Invalid username/password supplied\r\n  /user/logout:\r\n    get:\r\n      tags:\r\n        - user\r\n      summary: Logs out current logged in user session\r\n      description: ''\r\n      operationId: logoutUser\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters: []\r\n      responses:\r\n        default:\r\n          description: successful operation\r\n  '/user/{username}':\r\n    get:\r\n      tags:\r\n        - user\r\n      summary: Get user by user name\r\n      description: ''\r\n      operationId: getUserByName\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: username\r\n          in: path\r\n          description: 'The name that needs to be fetched. Use user1 for testing. '\r\n          required: true\r\n          type: string\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            $ref: '#/definitions/User'\r\n        '400':\r\n          description: Invalid username supplied\r\n        '404':\r\n          description: User not found\r\n    put:\r\n      tags:\r\n        - user\r\n      summary: Updated user\r\n      description: This can only be done by the logged in user.\r\n      operationId: updateUser\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: username\r\n          in: path\r\n          description: name that need to be updated\r\n          required: true\r\n          type: string\r\n        - in: body\r\n          name: body\r\n          description: Updated user object\r\n          required: true\r\n          schema:\r\n            $ref: '#/definitions/User'\r\n      responses:\r\n        '400':\r\n          description: Invalid user supplied\r\n        '404':\r\n          description: User not found\r\n    delete:\r\n      tags:\r\n        - user\r\n      summary: Delete user\r\n      description: This can only be done by the logged in user.\r\n      operationId: deleteUser\r\n      produces:\r\n        - application/xml\r\n        - application/json\r\n      parameters:\r\n        - name: username\r\n          in: path\r\n          description: The name that needs to be deleted\r\n          required: true\r\n          type: string\r\n      responses:\r\n        '400':\r\n          description: Invalid username supplied\r\n        '404':\r\n          description: User not found\r\nsecurityDefinitions:\r\n  petstore_auth:\r\n    type: oauth2\r\n    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'\r\n    flow: implicit\r\n    scopes:\r\n      'write:pets': modify pets in your account\r\n      'read:pets': read your pets\r\n  api_key:\r\n    type: apiKey\r\n    name: api_key\r\n    in: header\r\ndefinitions:\r\n  Order:\r\n    type: object\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n      petId:\r\n        type: integer\r\n        format: int64\r\n      quantity:\r\n        type: integer\r\n        format: int32\r\n      shipDate:\r\n        type: string\r\n        format: date-time\r\n      status:\r\n        type: string\r\n        description: Order Status\r\n        enum:\r\n          - placed\r\n          - approved\r\n          - delivered\r\n      complete:\r\n        type: boolean\r\n        default: false\r\n    xml:\r\n      name: Order\r\n  Category:\r\n    type: object\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n      name:\r\n        type: string\r\n    xml:\r\n      name: Category\r\n  User:\r\n    type: object\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n      username:\r\n        type: string\r\n      firstName:\r\n        type: string\r\n      lastName:\r\n        type: string\r\n      email:\r\n        type: string\r\n      password:\r\n        type: string\r\n      phone:\r\n        type: string\r\n      userStatus:\r\n        type: integer\r\n        format: int32\r\n        description: User Status\r\n    xml:\r\n      name: User\r\n  Tag:\r\n    type: object\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n      name:\r\n        type: string\r\n    xml:\r\n      name: Tag\r\n  Pet:\r\n    type: object\r\n    example:\r\n      id: 0\r\n      category:\r\n        id: 1\r\n        name: Cat\r\n      name: Kitty\r\n      photoUrls:\r\n        - https://pixabay.com/photos/kitty-cat-kitten-pet-animal-cute-551554/\r\n      tags:\r\n        - id: 0\r\n          name: Kitty\r\n        - id: 1\r\n          name: Cat\r\n        - id: 2\r\n          name: Kitten\r\n      status: available\r\n    required:\r\n      - name\r\n      - photoUrls\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n      category:\r\n        $ref: '#/definitions/Category'\r\n      name:\r\n        type: string\r\n        example: doggie\r\n      photoUrls:\r\n        type: array\r\n        xml:\r\n          name: photoUrl\r\n          wrapped: true\r\n        items:\r\n          type: string\r\n      tags:\r\n        type: array\r\n        xml:\r\n          name: tag\r\n          wrapped: true\r\n        items:\r\n          $ref: '#/definitions/Tag'\r\n      status:\r\n        type: string\r\n        description: pet status in the store\r\n        enum:\r\n          - available\r\n          - pending\r\n          - sold\r\n    xml:\r\n      name: Pet\r\n  ApiResponse:\r\n    type: object\r\n    properties:\r\n      code:\r\n        type: integer\r\n        format: int32\r\n      type:\r\n        type: string\r\n      message:\r\n        type: string\r\nexternalDocs:\r\n  description: Find out more about Swagger\r\n  url: 'http://swagger.io'\r\n"
  },
  "tracingEnabled" : false,
  "scopes" : [ ],
  "publishedPortals" : [ ],
  "creationDate" : "2021-04-29 12:22:24 GMT",
  "lastModified" : "2021-05-20 16:03:59 GMT",
  "systemVersion" : 1,
  "gatewayEndpoints" : { },
  "id" : "96c0ee50-1598-4d84-910f-42ddbf3d9b23"
}