parameters:
- name: design_stage
  type: object
- name: build_stage
  type: object
- name: target_stages
  type: object
- name: all_stages
  type: object
- name: deployment_sets
  displayName: Deploy which sets of API projects on which API Gateway stages?
  type: object

stages:
- ${{ each target_stage in parameters.target_stages }}:
  - ${{ each deployment_set in parameters.deployment_sets }}:
    - ${{ each deployment_target in deployment_set.targets }}:
      - ${{ if eq(target_stage.name, deployment_target) }}:
        - ${{ each api_project in deployment_set.api_projects }}:
          - stage: ${{deployment_target}}_${{api_project}}
            dependsOn: []
            lockBehavior: sequential
            jobs:
            - deployment: 'Build_${{api_project}}_for_${{deployment_target}}'
              environment: '${{parameters.build_stage.name}}_instances'
              variables:
              - group: ${{parameters.build_stage.name}}_users
              pool:
                name: '$(build_pool_name)'
                vmImage: '$(build_pool_image)'
              strategy:
                runOnce:    #rolling, canary are the other strategies that are supported
                  deploy:
                    steps:
                    - checkout: self
                      submodules: "true"
                      persistCredentials: "true"
                      fetchDepth: 0
                    - download: none
                    - bash: |
                        agentName=$(echo $AGENT_NAME)
                        echo "Agent Name: $agentName"
                        echo "##vso[task.setvariable variable=agent_name]$agentName"  # Set an output variable
                      displayName: Retrieve agent name
                    - template: /pipelines/api-build-steps-template.yml
                      parameters:
                        api_project: ${{api_project}}
                        build_environment: "$(agent_name)_environment.json"
                        build_stage_name: ${{parameters.build_stage.name}}
                        build_instance_name: $(agent_name)
                        target_type: ${{deployment_target}}
                        prep_condition: ${{true}}
                        test_condition: ${{ not(target_stage.is_design_stage) }}
                    - template: /pipelines/store-build-template.yml
                      parameters:
                        target_type: ${{deployment_target}}
                        api_project: ${{api_project}}
                    - bash: |
                        echo "##vso[build.addbuildtag]${{api_project}}"
                        echo "##vso[build.addbuildtag]$(agent_name)"
                        echo "##vso[build.addbuildtag]${{api_project}}_$(agent_name)"
                      displayName: Add build tags
                    # - template: /pipelines/store-build-artifactory-template.yml
                    #   parameters:
                    #     target_type: $(targetType)

            - ${{ each deploy_instance in target_stage.instances }}:
              - deployment: 'Deploy_${{api_project}}_to_API_Gateway_${{deploy_instance}}'
                environment: ${{deploy_instance}}
                variables:
                - group: ${{target_stage.name}}_users
                - group: ${{deploy_instance}}_users
                pool:
                  name: '$(pool_name)'
                  vmImage: '$(pool_image)'
                strategy:
                  runOnce:    #rolling, canary are the other strategies that are supported
                    deploy:
                      steps:
                      - checkout: self
                        submodules: "true"
                        persistCredentials: "true"
                        fetchDepth: 0
                      - template: /pipelines/retrieve-build-template.yml
                        parameters:
                          target_type: ${{deployment_target}}
                          api_project: ${{api_project}}
                      - template: /pipelines/api-deploy-steps-template.yml
                        parameters:
                          api_project: ${{api_project}}
                          target_environment: ${{deploy_instance}}_environment.json
                          target_type: ${{deployment_target}}
                          prep_condition: ${{true}}
                          test_condition: ${{ not(target_stage.is_design_stage) }}
                      - bash: |
                          echo "##vso[build.addbuildtag]${{api_project}}"
                          echo "##vso[build.addbuildtag]${{deploy_instance}}"
                          echo "##vso[build.addbuildtag]${{api_project}}_${{deploy_instance}}"
                        displayName: Add build tags
                dependsOn: 'Build_${{api_project}}_for_${{deployment_target}}'
                condition: succeeded()