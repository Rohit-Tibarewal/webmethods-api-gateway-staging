parameters:
- name: tenant
  displayName: Deploy API project on API Gateway stages in which tenant?
  type: string
  default: playground
  values:
  - playground
  - realworld
- name: apiProject
  displayName: Deploy which API project?
  type: string
- name: build_stage
  displayName: Build on which stage?
  type: object
- name: target_stages
  displayName: Deploy to which stages?
  type: object

stages:
- ${{ each build_instance in parameters.build_stage.instances }}:
  - stage: 'Anchor_Stage_for_${{ build_instance }}'
    dependsOn: []
    jobs:
    - job: 'Do_nothing'
      variables:
      - group: ${{parameters.tenant}}_BUILD_users
      - group: ${{parameters.tenant}}_${{build_instance}}_users
      pool:
        name: '$(pool_name)'
        vmImage: '$(pool_image)'
  - ${{ each target_stage in parameters.target_stages }}:
    - ${{ if eq(build_instance, target_stage.build_instance) }}:
      - stage: '${{ target_stage.name }}_${{ parameters.apiProject }}'
        jobs:
        - deployment: 'Build_${{parameters.apiProject}}_for_${{ target_stage.name }}_on_${{build_instance}}'
          environment: '${{build_instance}}'
          variables:
          - group: ${{parameters.tenant}}_BUILD_users
          - group: ${{parameters.tenant}}_${{build_instance}}_users
          pool:
            name: '$(pool_name)'
            vmImage: '$(pool_image)'
          strategy:
            runOnce:    #rolling, canary are the other strategies that are supported
              deploy:
                steps:
                  - checkout: self
                    submodules: "true"
                    persistCredentials: "true"
                  # - download: none
                  # - template: /pipelines/api-build-steps-template.yml
                  #   parameters:
                  #     apiProject: ${{parameters.apiProject}}
                  #     build_environment: "${{build_instance}}_environment.json"
                  #     target_type: ${{ target_stage.name }}
                  #     prep_condition: ${{true}}
                  #     test_condition: ${{ ne(target_stage.name, 'DESIGN') }}
                  #     tenant: ${{parameters.tenant}}
                  # - template: /pipelines/store-build-template.yml
                  #   parameters:
                  #     target_type: ${{ target_stage.name }}
                  #     apiProject: ${{parameters.apiProject}}
                  - bash: |
                      echo "##vso[build.addbuildtag]${{parameters.apiProject}}"
                      echo "##vso[build.addbuildtag]${{build_instance}}
                      echo "##vso[build.addbuildtag]${{parameters.apiProject}}_${{build_instance}}"
                    displayName: Add build tags
                  # - template: /pipelines/store-build-artifactory-template.yml
                  #   parameters:
                  #     target_type: $(target_stage.name)

        # - ${{ each instance in target_stage.instances }}:
        #   - deployment: 'Deploy_${{parameters.apiProject}}_to_API_Gateway_${{ instance }}'
        #     environment: ${{ instance }}
        #     variables:
        #     - group: ${{parameters.tenant}}_${{ target_stage.name }}_users
        #     - group: ${{parameters.tenant}}_${{ instance }}_users
        #     pool:
        #       name: '$(pool_name)'
        #       vmImage: '$(pool_image)'
        #     strategy:
        #       runOnce:    #rolling, canary are the other strategies that are supported
        #         deploy:
        #           steps:
        #           - checkout: self
        #             submodules: "true"
        #             persistCredentials: "true"
        #           - template: /pipelines/retrieve-build-template.yml
        #             parameters:
        #                 target_type: ${{ target_stage.name }}
        #                 apiProject: ${{parameters.apiProject}}
        #           - template: /pipelines/api-deploy-steps-template.yml
        #             parameters:
        #               apiProject: ${{parameters.apiProject}}
        #               target_environment: ${{ instance }}_environment.json
        #               target_type: ${{ target_stage.name }}
        #               prep_condition: ${{true}}
        #               test_condition: ${{ ne('${{ target_stage.name }}', 'DESIGN') }}
        #               tenant: ${{parameters.tenant}}
        #           - bash: |
        #               echo "##vso[build.addbuildtag]${{parameters.apiProject}}"
        #               echo "##vso[build.addbuildtag]${{instance}}"
        #               echo "##vso[build.addbuildtag]${{parameters.apiProject}}_${{instance}}"
        #             displayName: Add build tags
        #     dependsOn: 'Build_${{parameters.apiProject}}_for_${{ target_stage.name }}_on_${{build_instance}}'
        #     condition: succeeded()