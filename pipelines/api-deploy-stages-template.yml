parameters:
- name: tenant
  displayName: Deploy API project on API Gateway stages in which tenant?
  type: string
  default: playground
  values:
  - playground
  - realworld
- name: apiProject
  displayName: Deploy which API project?
  type: string
- name: build_stage
  displayName: Build on which stage?
  type: object
  default:
    name: BUILD
    jobs:
    - name: BUILD_01
      pool: buildagents
      image: ubuntu-latest
    - name: BUILD_02
      pool: buildagents
      image: ubuntu-latest
    - name: BUILD_03
      pool: buildagents
      image: ubuntu-latest
- name: target_stages
  displayName: Deploy to which stages?
  type: object
  default:
  - name: DEV_INT
    jobs:
    - name: DEV_INT
      pool: vmsspoolagents
      image: ubuntu-latest
  - name: DEV_EXT
    jobs:
    - name: DEV_EXT
      pool: vmsspoolagents
      image: ubuntu-latest
  - name: STAGE_INT
    jobs:
    - name: STAGE_INT
      pool: vmsspoolagents
      image: ubuntu-latest
  - name: STAGE_EXT
    jobs:
    - name: STAGE_EXT
      pool: vmsspoolagents
      image: ubuntu-latest
  - name: PROD_INT
    jobs:
    - name: PROD_INT_01
      pool: vmsspoolagents
      image: ubuntu-latest
    - name: PROD_INT_02
      pool: vmsspoolagents
      image: ubuntu-latest
  - name: PROD_EXT
    jobs:
    - name: PROD_EXT_01
      pool: vmsspoolagents
      image: ubuntu-latest
    - name: PROD_EXT_02
      pool: vmsspoolagents
      image: ubuntu-latest

stages:
- ${{ each target_stage in parameters.target_stages }}:
  - stage: ${{ target_stage.name }}
    # dependsOn: []
    jobs:
    - ${{ each job in parameters.build_stage.jobs }}:
      - deployment: 'Build_${{parameters.apiProject}}_for_${{ target_stage.name }}_on_${{job.name}}'
        environment: '${{ job.name }}'
        variables:
        - group: ${{parameters.tenant}}_${{ job.name }}_users
        pool:
          name: '${{ job.pool }}'
          vmImage: '${{ job.image }}'
        # condition: eq($(Agent.Name), ${{ job.name }})
        strategy:
          runOnce:    #rolling, canary are the other strategies that are supported
            deploy:
              steps:
              - checkout: self
                submodules: "true"
                persistCredentials: "true"
              - download: none
              - bash: |
                  echo '${{ target_stage.name }}'
                  echo 'CONFIG'
                displayName: DEBUG
              - template: /pipelines/api-build-steps-template.yml
                parameters:
                  apiProject: ${{parameters.apiProject}}
                  build_environment: "${{parameters.tenant}}_$(Agent.Name)_environment.json"
                  target_type: ${{ target_stage.name }}
                  prep_condition: ${{true}}
                  test_condition: ${{ ne(target_stage.name, 'CONFIG') }}
                  tenant: ${{parameters.tenant}}
              - template: /pipelines/store-build-template.yml  # Template reference
                parameters:
                  target_type: ${{ target_stage.name }}
                  apiProject: ${{parameters.apiProject}}
              - bash: |
                  echo "##vso[build.addbuildtag]${{parameters.apiProject}}"
                  echo "##vso[build.addbuildtag]${{job.name}}"
                  echo "##vso[build.addbuildtag]${{parameters.apiProject}}_${{job.name}}"
                displayName: Add build tags
              # - template: /pipelines/store-build-artifactory-template.yml  # Template reference
              #   parameters:
              #     target_type: $(target_stage)

    # - ${{ each job in target_stage.jobs }}:
    #   - deployment: 'Deploy_${{parameters.apiProject}}_to_API_Gateway_${{ job.name }}'
    #     environment: ${{ job.name }}
    #     variables:
    #     - group: ${{parameters.tenant}}_${{ job.name }}_users
    #     pool:
    #       name: '${{ job.pool }}'
    #       vmImage: '${{ job.image }}'
    #     strategy:
    #       runOnce:    #rolling, canary are the other strategies that are supported
    #         deploy:
    #           steps:
    #           - checkout: self
    #             submodules: "true"
    #             persistCredentials: "true"
    #           - template: /pipelines/retrieve-build-template.yml  # Template reference
    #             parameters:
    #                 target_type: ${{ target_stage.name }}
    #                 apiProject: ${{parameters.apiProject}}
    #           - template: /pipelines/api-deploy-steps-template.yml  # Template reference
    #             parameters:
    #               apiProject: ${{parameters.apiProject}}
    #               target_environment: ${{ job.name }}_environment.json
    #               target_type: ${{ target_stage.name }}
    #               prep_condition: ${{true}}
    #               test_condition: ${{ ne('${{ target_stage.name }}', 'CONFIG') }}
    #               tenant: ${{parameters.tenant}}
    #           - bash: |
    #               echo "##vso[build.addbuildtag]${{parameters.apiProject}}"
    #               echo "##vso[build.addbuildtag]${{job.name}}"
    #               echo "##vso[build.addbuildtag]${{parameters.apiProject}}_${{job.name}}"
    #             displayName: Add build tags
    #     dependsOn: 'Build_${{parameters.apiProject}}_for_${{ target_stage.name }}'
    #     condition: succeeded()