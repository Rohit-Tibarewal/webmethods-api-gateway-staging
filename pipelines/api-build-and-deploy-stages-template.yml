parameters:
- name: design_stage
  type: object
- name: build_stage
  type: object
- name: target_stages
  type: object
- name: all_stages
  type: object
- name: build_instances_mapping
  type: object
- name: deployment_sets
  displayName: Deploy which sets of API projects on which API Gateway stages?
  type: object

stages:
- ${{ each target_stage in parameters.target_stages }}:
  - ${{ each deployment_set in parameters.deployment_sets }}:
    - ${{ each deployment_target in deployment_set.targets }}:
      - ${{ if eq(target_stage.name, deployment_target) }}:
        - ${{ each api_project in deployment_set.api_projects }}:
          - stage: ${{deployment_target}}_${{api_project}}
            dependsOn: []
            lockBehavior: sequential
            jobs:
            - template: /pipelines/api-build-job-template-fixed-build-environments.yml
            # - template: /pipelines/api-build-job-template-dedicated-build-agents.yml
            # - template: /pipelines/api-build-job-template-resource-pooling.yml
              parameters:
                build_stage: ${{parameters.build_stage}}
                target_stage: ${{target_stage}}
                api_project: ${{api_project}}
                deployment_target: ${{deployment_target}}
                build_instances_mapping: ${{parameters.build_instances_mapping}}

            - ${{ each deploy_instance in target_stage.instances }}:
              - job: Check_environment_file_for_${{deploy_instance}}
                dependsOn: 'Build_${{api_project}}_for_${{deployment_target}}'
                condition: succeeded()
                pool:
                  name: '$(pool_name)'
                  vmImage: '$(pool_image)'
                steps:
                - checkout: self
                  submodules: "true"
                  persistCredentials: "true"
                  fetchDepth: 0
                - bash: |
                    if test -f $(System.DefaultWorkingDirectory)/environments/$(project_name)/${{deploy_instance}}_environment.json; then
                      echo Environment file $(System.DefaultWorkingDirectory)/environments/$(project_name)/${{deploy_instance}}_environment.json exists
                      echo "##vso[task.setvariable variable=environment_file_exists;isoutput=true]true"
                    else
                      echo Environment file $(System.DefaultWorkingDirectory)/environments/$(project_name)/${{deploy_instance}}_environment.json does not exist, skipping next job
                      echo "##vso[task.setvariable variable=environment_file_exists;isoutput=true]false"
                      echo "##vso[task.logissue type=warning]Environment file not found: $(System.DefaultWorkingDirectory)/environments/$(project_name)/${{deploy_instance}}_environment.json"
                      echo "##vso[task.complete result=SucceededWithIssues]Environment file not found: $(System.DefaultWorkingDirectory)/environments/$(project_name)/${{deploy_instance}}_environment.json"
                    fi
                  displayName: Check if environment.json file exists
                  name: Check_environment_file

              - deployment: 'Deploy_${{api_project}}_to_API_Gateway_${{deploy_instance}}'
                dependsOn: Check_environment_file_for_${{deploy_instance}}
                condition: and(succeeded(), eq(dependencies.Check_environment_file_for_${{deploy_instance}}.outputs['Check_environment_file.environment_file_exists'], 'true'))
                environment: ${{deploy_instance}}
                variables:
                - group: ${{target_stage.name}}_users
                - group: ${{deploy_instance}}_users
                pool:
                  name: '$(pool_name)'
                  vmImage: '$(pool_image)'
                strategy:
                  runOnce:    #rolling, canary are the other strategies that are supported
                    deploy:
                      steps:
                      - checkout: self
                        submodules: "true"
                        persistCredentials: "true"
                        fetchDepth: 0
                      - bash: cat $(System.DefaultWorkingDirectory)/environments/$(project_name)/${{deploy_instance}}_environment.json
                        displayName: Check if environment.json file exists
                      - template: /pipelines/retrieve-build-template.yml
                        parameters:
                          target_type: ${{deployment_target}}
                          api_project: ${{api_project}}
                      - template: /pipelines/api-deploy-steps-template.yml
                        parameters:
                          api_project: ${{api_project}}
                          target_environment: ${{deploy_instance}}_environment.json
                          target_type: ${{deployment_target}}
                      - bash: |
                          echo "##vso[build.addbuildtag]${{api_project}}"
                          echo "##vso[build.addbuildtag]${{deploy_instance}}"
                          echo "##vso[build.addbuildtag]${{api_project}}_${{deploy_instance}}"
                        displayName: Add build tags