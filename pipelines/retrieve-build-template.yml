# Pipeline template for apig staging

parameters:
  target_type: ''
  apiProject: ''


steps:
- bash: echo Job runs in pool '$(agent_pool)' on VM image '$(agent_pool_vmImage)' for target_type '${{parameters.target_type}}'
  displayName: Job runs in pool '$(agent_pool)' on VM image '$(agent_pool_vmImage)' for target_type '${{parameters.target_type}}'

- bash: |
    if [ -z "$TARGET_TYPE" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"target_type\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$API_PROJECT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"apiProject\""
      echo "##vso[task.complete result=Failed;]"
    fi
  env:
    TARGET_TYPE: ${{parameters.target_type}}
    API_PROJECT: ${{parameters.apiProject}}
  displayName: Check for required parameters

- download: current
  artifact: ${{parameters.apiProject}}_${{parameters.target_type}}
  displayName: Build Download

- bash: |
    cp $(Pipeline.Workspace)/${{parameters.apiProject}}_${{parameters.target_type}}/* $(System.DefaultWorkingDirectory)
  displayName: Copy artifact into working directory

# - task: JFrog.jfrog-artifactory-vsts-extension.artifactory-generic-download.ArtifactoryGenericDownload@3
#   displayName: 'Artifactory Build Download'
#   inputs:
#     connection: '$(artifactoryService)'
#     fileSpec: |
#       {
#           "files": [
#               {
#                   "pattern": "$(artifactoryFolder)/$(Build.BuildId)_export_for_${{parameters.target_type}}.zip",
#                   "target": "$(System.DefaultWorkingDirectory)/",
#                   "flat": "true"
#               }
#           ]
#       }