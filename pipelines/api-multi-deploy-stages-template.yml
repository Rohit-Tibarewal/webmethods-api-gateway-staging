parameters:
- name: tenant
  displayName: Deploy API project on API Gateway stages in which tenant?
  type: string
  default: playground
  values:
  - playground
  - realworld
- name: build_stage
  displayName: Build on which stage?
  type: object
- name: target_stages
  displayName: Deploy to which stages?
  type: object
- name: deployment_sets
  displayName: Deploy which sets of API projects on which API Gateway stages?
  type: object

stages:
- ${{ each target_stage in parameters.target_stages }}:
  - ${{ each deployment_set in parameters.deployment_sets }}:
    - ${{ each deployment_target in deployment_set.targets }}:
      - ${{ if eq(target_stage.name, deployment_target) }}:
        - ${{ each apiProject in deployment_set.apiProjects }}:
          - stage: ${{ deployment_target }}_${{ apiProject }}
            ${{ if eq(apiProject, parameters.deployment_sets[0].apiProjects[0]) }}:
              dependsOn: []
            jobs:
            - deployment: 'Build_${{apiProject}}_for_${{ deployment_target }}'
              environment: '$(${{ deployment_target }}_build_instance)'
              variables:
              - group: ${{parameters.tenant}}_BUILD_users
              pool:
                name: '$(pool_name)'
                vmImage: '$(pool_image)'
              strategy:
                runOnce:    #rolling, canary are the other strategies that are supported
                  deploy:
                    steps:
                    - checkout: self
                      submodules: "true"
                      persistCredentials: "true"
                    - download: none
                    - template: /pipelines/api-build-steps-template.yml
                      parameters:
                        apiProject: ${{apiProject}}
                        build_environment: "$(${{ deployment_target }}_build_instance)_environment.json"
                        target_type: ${{ deployment_target }}
                        prep_condition: ${{true}}
                        test_condition: ${{ ne(deployment_target, 'DESIGN') }}
                        tenant: ${{parameters.tenant}}
                    - template: /pipelines/store-build-template.yml
                      parameters:
                        target_type: ${{ deployment_target }}
                        apiProject: ${{apiProject}}
                    - bash: |
                        echo "##vso[build.addbuildtag]${{apiProject}}"
                        echo "##vso[build.addbuildtag]${{parameters.build_stage.name}}"
                        echo "##vso[build.addbuildtag]${{apiProject}}_${{parameters.build_stage.name}}"
                      displayName: Add build tags
                    # - template: /pipelines/store-build-artifactory-template.yml
                    #   parameters:
                    #     target_type: $(targetType)

            - ${{ each deploy_instance in target_stage.instances }}:
              - deployment: 'Deploy_${{apiProject}}_to_API_Gateway_${{ deploy_instance.name }}'
                environment: ${{ deploy_instance.name }}
                variables:
                - group: ${{parameters.tenant}}_${{ target_stage.name }}_users
                - group: ${{parameters.tenant}}_${{ deploy_instance.name }}_users
                pool:
                  name: '$(pool_name)'
                  vmImage: '$(pool_image)'
                strategy:
                  runOnce:    #rolling, canary are the other strategies that are supported
                    deploy:
                      steps:
                      - checkout: self
                        submodules: "true"
                        persistCredentials: "true"
                      - template: /pipelines/retrieve-build-template.yml
                        parameters:
                            target_type: ${{ deployment_target }}
                            apiProject: ${{apiProject}}
                      - template: /pipelines/api-deploy-steps-template.yml
                        parameters:
                          apiProject: ${{apiProject}}
                          target_environment: ${{ deploy_instance.name }}_environment.json
                          target_type: ${{ deployment_target }}
                          prep_condition: ${{true}}
                          test_condition: ${{ ne('${{ deployment_target }}', 'DESIGN') }}
                          tenant: ${{parameters.tenant}}
                      - bash: |
                          echo "##vso[build.addbuildtag]${{apiProject}}"
                          echo "##vso[build.addbuildtag]${{deploy_instance.name}}"
                          echo "##vso[build.addbuildtag]${{apiProject}}_${{deploy_instance.name}}"
                        displayName: Add build tags
                dependsOn: 'Build_${{apiProject}}_for_${{ deployment_target }}'
                condition: succeeded()