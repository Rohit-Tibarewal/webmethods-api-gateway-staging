parameters:
  environment_set: ''
  environment: ''
  type: ''

steps:
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(System.DefaultWorkingDirectory)/configuration/${{parameters.type}}/assets'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{parameters.target_type}}_configuration.zip'
    replaceExistingArchive: true
    verbose: true
  displayName: 'Create the API Deployable from the flat representation for ${{parameters.type}} configuration'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{parameters.target_type}}_configuration.zip'
    artifactName: '${{parameters.type}}_import'

- bash: |
   echo "##vso[task.setvariable variable=environment_hostname]`jq -r '.values[] | select(.key == "hostname") | .value' environments/${{parameters.environment_set}}/${{parameters.environment}}`"
   echo "##vso[task.setvariable variable=environment_ip]`jq -r '.values[] | select(.key == "ip") | .value' environments/${{parameters.environment_set}}/${{parameters.environment}}`"
   echo "##vso[task.setvariable variable=environment_port]`jq -r '.values[] | select(.key == "port") | .value' environments/${{parameters.environment_set}}/${{parameters.environment}}`"
   echo "##vso[task.setvariable variable=environment_insecureflag]`jq -r '.values[] | select(.key == "insecureflag") | .value' environments/${{parameters.environment_set}}/${{parameters.environment}}`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Read and parse API Gateway ${{parameters.type}} configuration, extract ip, hostname, port and insecureflag'

- bash: |
    echo "##vso[task.setvariable variable=scopes]`jq -c '.' $(System.DefaultWorkingDirectory)/configuration/${{parameters.type}}/scopes.json`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Prepare list of scopes to be imported'

- script: |
    newman run postman/collections/utilities/import/Import_API_Gateway_config.json --reporters cli \
    --env-var importer_user='$(importer_user)' \
    --env-var importer_password='$(importer_password)' \
    --env-var initializer_user='$(initializer_user)' \
    --env-var initializer_password='$(initializer_password)' \
    --env-var scopes='$(scopes)' \
    --env-var file_Loc=$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{parameters.target_type}}_configuration.zip \
    -e $(System.DefaultWorkingDirectory)/environments/${{parameters.environment_set}}/${{parameters.environment}} \
    $(environment_insecureflag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Import the Deployable To API Gateway ${{parameters.type}}'
  env:
    no_proxy: $(environment_ip)

- script: |
    newman run postman/collections/utilities/initialize/Initialize_${{parameters.type}}.json --reporters cli \
    --env-var initializer_user='$(initializer_user)' \
    --env-var initializer_password='$(initializer_password)' \
    --env-var elasticsearch_user='$(elasticsearch_user)' \
    --env-var elasticsearch_password='$(elasticsearch_password)' \
    --env-var file_Loc=$(Build.BuildId)_configuration.zip -e environments/${{parameters.environment_set}}/${{parameters.environment}} \
    $(environment_insecureflag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Initialize API Gateway ${{parameters.type}}'
  env:
    no_proxy: $(environment_ip)