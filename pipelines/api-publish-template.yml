# Pipeline template for apig staging

parameters:
  apiId: ''
  target_environment: ''
  target_type: ''
  tenant: ''

steps:
- bash: echo Job runs in pool '$(agent_pool)' on VM image '$(agent_pool_vmImage)' for apiId '${{parameters.apiId}}' and target_type '${{parameters.target_type}}'
  displayName: Job runs in pool '$(agent_pool)' on VM image '$(agent_pool_vmImage)' for apiId '${{parameters.apiId}}' and target_type '${{parameters.target_type}}'

- bash: |
    if [ -z "$APIID" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"apiId\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TARGET_ENVIRONMENT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"target_environment\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TARGET_TYPE" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"target_type\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TENANT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"tenant\""
      echo "##vso[task.complete result=Failed;]"
    fi
  env:
    APIID: ${{parameters.apiId}}
    TARGET_ENVIRONMENT: ${{parameters.target_environment}}
    TARGET_TYPE: ${{parameters.target_type}}
    TENANT: ${{parameters.tenant}}
  displayName: Check for required parameters

- bash: |
   echo "##vso[task.setvariable variable=target_environment_hostname]`jq -r '.values[] | select(.key == "hostname") | .value' ${{parameters.tenant}}/environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_ip]`jq -r '.values[] | select(.key == "ip") | .value' ${{parameters.tenant}}/environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_port]`jq -r '.values[] | select(.key == "port") | .value' ${{parameters.tenant}}/environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_insecureflag]`jq -r '.values[] | select(.key == "insecureflag") | .value' ${{parameters.tenant}}/environments/${{parameters.target_environment}}`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Read and parse API Gateway ${{parameters.target_type}} configuration, extract ip, hostname, port and insecureflag'

- script: |
    newman run utilities/publish/PublishAPI.json --reporters cli \
    --env-var apiId='${{parameters.apiId}}' \
    -e ${{parameters.tenant}}/environments/${{parameters.target_environment}} \
    $(target_environment_insecureflag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Publish the API To Developer Portal on API Gateway ${{parameters.target_type}}'
  env:
    no_proxy: $(target_environment_ip)