parameters:
- name: design_stage
  type: object
- name: build_stage
  type: object
- name: target_stages
  type: object
- name: all_stages
  type: object
- name: build_instances_mapping
  type: object
- name: deployment_sets
  displayName: Deploy which sets of API projects on which API Gateway stages?
  type: object

stages:
- ${{ each target_stage in parameters.target_stages }}:
  - ${{ each deployment_set in parameters.deployment_sets }}:
    - ${{ each deployment_target in deployment_set.targets }}:
      - ${{ if eq(target_stage.name, deployment_target) }}:
        - ${{ each api_project in deployment_set.api_projects }}:
          - stage: ${{deployment_target}}_${{api_project}}
            dependsOn: []
            lockBehavior: sequential
            jobs:
            - deployment: 'Build_${{api_project}}_for_${{deployment_target}}'
              environment: '${{parameters.build_stage.name}}_instances'
              variables:
              - group: ${{parameters.build_stage.name}}_users
              - ${{ if not(target_stage.is_design_stage) }}:
                - group: ${{target_stage.name}}_value_substitutions
              pool:
                name: '$(pool_name)'
                vmImage: '$(pool_image)'
              strategy:
                runOnce:    #rolling, canary are the other strategies that are supported
                  deploy:
                    steps:
                    - checkout: self
                      submodules: "true"
                      persistCredentials: "true"
                      fetchDepth: 0
                    - download: none
                    - script: |
                        echo "$(PAT)" | az devops login --organization https://dev.azure.com/pswm-inno-api-management
                        group_id=$(az pipelines variable-group list --organization https://dev.azure.com/pswm-inno-api-management --project azure-demo --group-name "Build_instances_availability" --query [0].id)
                        resource_name="null"
                        claimtext="Claimed by $(Build.DefinitionName)-$(Build.BuildNumber) for ${{deployment_target}}_${{api_project}}"
                        # Loop until a resource is available
                        while [ "$resource_name" == "null" ]; do
                          resource_name=$(az pipelines variable-group list --organization https://dev.azure.com/pswm-inno-api-management --project azure-demo --group-name "Build_instances_availability" --query [0].variables | jq -r "[ to_entries[] | select (.value.value==\"Available\") ][0].key")
                          if [ "$resource_name" == "null" ]; then
                            echo "No available resource found. Waiting..."
                            sleep 60
                          else
                            echo "Resource found: $resource_name"
                            az pipelines variable-group variable update --organization https://dev.azure.com/pswm-inno-api-management --project azure-demo --group-id $group_id --name "$resource_name" --value "$claimtext"
                            sleep 5
                            claimtext_read=$(az pipelines variable-group list --organization https://dev.azure.com/pswm-inno-api-management --project azure-demo --group-name "Build_instances_availability" --query [0].variables.$resource_name.value -o tsv)
                            if [ "$claimtext_read" == "$claimtext" ]; then
                              echo "Resource claimed: $claimtext"
                            else
                              echo "Resource taken by another agent: $claimtext_read"
                              echo "Expected claimtext: $claimtext"
                              echo "Trying again..."
                              resource_name="null"
                            fi
                          fi
                        done
                        echo "Selected Resource: $resource_name"
                        echo "##vso[task.setvariable variable=claimed_resource]$resource_name"
                      name: claim_resource
                      displayName: 'Claim Resource'
                    - template: /pipelines/api-build-steps-template.yml
                      parameters:
                        api_project: ${{api_project}}
                        build_environment: "$(claimed_resource)_environment.json"
                        build_stage_name: ${{parameters.build_stage.name}}
                        build_instance_name: $(claimed_resource)
                        target_type: ${{deployment_target}}
                        prepare_condition: ${{true}}
                        test_condition: ${{ not(target_stage.is_design_stage) }}
                        replace_condition: ${{ not(target_stage.is_design_stage) }}
                    - template: /pipelines/store-build-template.yml
                      parameters:
                        target_type: ${{deployment_target}}
                        api_project: ${{api_project}}
                    - bash: |
                        echo "##vso[build.addbuildtag]${{api_project}}"
                        echo "##vso[build.addbuildtag]$(claimed_resource)"
                        echo "##vso[build.addbuildtag]${{api_project}}_$(claimed_resource)"
                      displayName: Add build tags
                    # - template: /pipelines/store-build-artifactory-template.yml
                    #   parameters:
                    #     target_type: $(targetType)
                    - script: |
                        echo "$(PAT)" | az devops login --organization https://dev.azure.com/pswm-inno-api-management
                        group_id=$(az pipelines variable-group list --organization https://dev.azure.com/pswm-inno-api-management --project azure-demo --group-name "Build_instances_availability" --query [0].id)
                        az pipelines variable-group variable update --organization https://dev.azure.com/pswm-inno-api-management --project azure-demo --group-id $group_id --name "$(claimed_resource)" --value "Available"
                        echo "Released Claimed Resource: $(claimed_resource)"
                      displayName: 'Release Resource'
                      condition: always() # Release lock even if build was not successful

            - ${{ each deploy_instance in target_stage.instances }}:
              - deployment: 'Deploy_${{api_project}}_to_API_Gateway_${{deploy_instance}}'
                continueOnError: true
                environment: ${{deploy_instance}}
                variables:
                - group: ${{target_stage.name}}_users
                - group: ${{deploy_instance}}_users
                pool:
                  name: '$(pool_name)'
                  vmImage: '$(pool_image)'
                strategy:
                  runOnce:    #rolling, canary are the other strategies that are supported
                    deploy:
                      steps:
                      - checkout: self
                        submodules: "true"
                        persistCredentials: "true"
                        fetchDepth: 0
                      - bash: cat $(System.DefaultWorkingDirectory)/environments/$(project_name)/${{deploy_instance}}_environment.json
                        displayName: Check if environment.json file exists
                      - template: /pipelines/retrieve-build-template.yml
                        parameters:
                          target_type: ${{deployment_target}}
                          api_project: ${{api_project}}
                      - template: /pipelines/api-deploy-steps-template.yml
                        parameters:
                          api_project: ${{api_project}}
                          target_environment: ${{deploy_instance}}_environment.json
                          target_type: ${{deployment_target}}
                      - bash: |
                          echo "##vso[build.addbuildtag]${{api_project}}"
                          echo "##vso[build.addbuildtag]${{deploy_instance}}"
                          echo "##vso[build.addbuildtag]${{api_project}}_${{deploy_instance}}"
                        displayName: Add build tags
                dependsOn: 'Build_${{api_project}}_for_${{deployment_target}}'
                condition: succeeded()