# Pipeline template for apig staging

parameters:
  apiProject: ''
  target_environment: ''
  target_type: ''
  prep_condition: ''
  test_condition: ''
  tenant: ''

steps:
- bash: |
    if [ -z "$APIPROJECT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"apiProject\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TARGET_ENVIRONMENT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"target_environment\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TARGET_TYPE" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"target_type\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$PREP_CONDITION" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"prep_condition\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TEST_CONDITION" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"test_condition\""
      echo "##vso[task.complete result=Failed;]"
    fi
    if [ -z "$TENANT" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"tenant\""
      echo "##vso[task.complete result=Failed;]"
    fi
  env:
    APIPROJECT: ${{parameters.apiProject}}
    TARGET_ENVIRONMENT: ${{parameters.target_environment}}
    TARGET_TYPE: ${{parameters.target_type}}
    PREP_CONDITION: ${{parameters.prep_condition}}
    TEST_CONDITION: ${{parameters.test_condition}}
    TENANT: ${{parameters.tenant}}
  displayName: Check for required parameters

# - task: FileTransform@1
#   displayName: 'Replace hostname, ip and port in environment configuration'
#   inputs:
#     folderPath: '$(System.DefaultWorkingDirectory)/**/'
#     targetFiles: '**/${{parameters.target_environment}}'
#     fileType: json

- bash: |
   echo "##vso[task.setvariable variable=target_environment_hostname]`jq -r '.values[] | select(.key == "hostname") | .value' ${{parameters.tenant}}/environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_ip]`jq -r '.values[] | select(.key == "ip") | .value' ${{parameters.tenant}}/environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_port]`jq -r '.values[] | select(.key == "port") | .value' ${{parameters.tenant}}/environments/${{parameters.target_environment}}`"
   echo "##vso[task.setvariable variable=target_environment_insecureflag]`jq -r '.values[] | select(.key == "insecureflag") | .value' ${{parameters.tenant}}/environments/${{parameters.target_environment}}`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Read and parse API Gateway ${{parameters.target_type}} configuration, extract ip, hostname, port and insecureflag'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{ parameters.target_type }}_${{ parameters.apiProject }}_export.zip'
    artifactName: '${{parameters.target_type}}_${{parameters.apiProject}}_import'

- bash: |
    echo "##vso[task.setvariable variable=scopes]`jq -c '.' $(System.DefaultWorkingDirectory)/${{parameters.tenant}}/apis/${{parameters.apiProject}}/scopes.json`"
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Prepare list of scopes to be imported'

- script: |
    newman run postman/collections/utilities/import/Import_API.json --reporters cli \
    --env-var importer_user='$(importer_user)' \
    --env-var importer_password='$(importer_password)' \
    --env-var initializer_user='$(initializer_user)' \
    --env-var initializer_password='$(initializer_password)' \
    --env-var scopes='$(scopes)' \
    --env-var file_Loc=$(System.DefaultWorkingDirectory)/$(Build.BuildId)_${{ parameters.target_type }}_${{ parameters.apiProject }}_export.zip -e ${{parameters.tenant}}/environments/${{parameters.target_environment}} \
    $(target_environment_insecureflag)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Import the Deployable To API Gateway ${{parameters.target_type}}'
  env:
    no_proxy: $(target_environment_ip)