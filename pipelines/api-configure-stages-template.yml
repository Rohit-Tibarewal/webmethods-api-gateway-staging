parameters:
- name: design_stage
  type: object
- name: build_stage
  type: object
- name: target_stages
  type: object
- name: all_stages
  type: object
- name: build_instances_mapping
  type: object
- name: environment_set
- name: deployment_sets
  type: object

stages:
- ${{ each stage in parameters.all_stages }}:
  - stage: Configure_${{stage.name}}
    dependsOn: []
    jobs:
    - ${{ each instance in stage.instances }}:
      - deployment: Configure_API_Gateway_${{instance.name}}
        environment: API_Gateway_${{instance.name}}
        variables:
        - group: ${{stage.name}}_users
        - group: ${{instance.name}}_users
        pool:
          name: ${{instance.pool_name}}
          vmImage: ${{instance.pool_image}}
        strategy:
          runOnce:    #rolling, canary are the other strategies that are supported
            deploy:
              steps:
              - checkout: self
                submodules: "true"
                persistCredentials: "true"
                fetchDepth: 0
              - download: none
              # - bash: "Debug: $[dependencies.Check_environment_file_for_${{instance.name}}.outputs['Check_environment_file.environment_file_exists']]"
              - template: /pipelines/api-configure-steps-template.yml
                parameters:
                  environment_set: ${{parameters.environment_set}}
                  environment: ${{instance}}_environment.json
                  instance: ${{instance.name}}
                  type: ${{stage.name}}
              - bash: |
                  echo "##vso[build.addbuildtag]${{stage.name}}"
                  echo "##vso[build.addbuildtag]${{instance.name}}"
                  echo "##vso[build.addbuildtag]${{parameters.environment_set}}"
                displayName: Add build tags

    - ${{ if stage.configure_haft }}: # Configure HAFT on PROD stages
      - ${{ each instance in stage.instances }}:
        - deployment: Configure_HAFT_listener_for_API_Gateway_${{instance.name}}
          dependsOn: Configure_API_Gateway_${{instance.name}}
          environment: API_Gateway_${{instance.name}}
          variables:
          - group: ${{instance.name}}_users
          pool:
            name: ${{instance.pool_name}}
            vmImage: ${{instance.pool_image}}
          strategy:
            runOnce:    #rolling, canary are the other strategies that are supported
              deploy:
                steps:
                - checkout: self
                  submodules: "true"
                  persistCredentials: "true"
                  fetchDepth: 0

                - download: none

                - template: /pipelines/api-configure-haft-listener-steps-template.yml
                  parameters:
                    instance: ${{instance.name}}
                    type: ${{stage.name}}

        - deployment: Configure_HAFT_ring_for_API_Gateway_${{instance.name}}
          dependsOn:
          - Configure_HAFT_listener_for_API_Gateway_PRODUCTION
          - Configure_HAFT_listener_for_API_Gateway_GEOPRODUCTION
          environment: API_Gateway_${{instance.name}}
          variables:
          - group: ${{instance.name}}_users
          - name: node_name_01
            # value: $[stageDependencies.PRODUCTION_HAFT_listeners.Configure_HAFT_listener_for_API_Gateway_PRODUCTION.outputs['Configure_HAFT_listener_for_API_Gateway_PRODUCTION.setoutputvar.node_name']]
            value: $[dependencies.Configure_HAFT_listener_for_API_Gateway_PRODUCTION.outputs['Configure_HAFT_listener_for_API_Gateway_PRODUCTION.setoutputvar.node_name']]
          - name: node_name_02
            # value: $[stageDependencies.PRODUCTION_HAFT_listeners.Configure_HAFT_listener_for_API_Gateway_GEOPRODUCTION.outputs['Configure_HAFT_listener_for_API_Gateway_GEOPRODUCTION.setoutputvar.node_name']]
            value: $[dependencies.Configure_HAFT_listener_for_API_Gateway_GEOPRODUCTION.outputs['Configure_HAFT_listener_for_API_Gateway_GEOPRODUCTION.setoutputvar.node_name']]
          pool:
            name: ${{instance.pool_name}}
            vmImage: ${{instance.pool_image}}
          strategy:
            runOnce:    #rolling, canary are the other strategies that are supported
              deploy:
                steps:
                - checkout: self
                  submodules: "true"
                  persistCredentials: "true"
                  fetchDepth: 0

                - download: none

                - template: /pipelines/api-configure-haft-ring-steps-template.yml
                  parameters:
                    instance: ${{instance.name}}
                    type: ${{stage.name}}

      - job: Wait_for_HAFT_ring_to_form
        pool: server # note: the value 'server' is a reserved keyword which indicates this is an agentless job
        dependsOn:
        - Configure_HAFT_ring_for_API_Gateway_PRODUCTION
        - Configure_HAFT_ring_for_API_Gateway_GEOPRODUCTION
        steps:
        - task: Delay@1
          inputs:
            delayForMinutes: '5'

      - ${{ each instance in stage.instances }}:
        - deployment: Validate_HAFT_ring_for_API_Gateway_${{instance.name}}
          dependsOn: Wait_for_HAFT_ring_to_form
          environment: API_Gateway_${{instance.name}}
          variables:
          - group: ${{instance.name}}_users
          pool:
            name: ${{instance.pool_name}}
            vmImage: ${{instance.pool_image}}
          strategy:
            runOnce:    #rolling, canary are the other strategies that are supported
              deploy:
                steps:
                - checkout: self
                  submodules: "true"
                  persistCredentials: "true"
                  fetchDepth: 0

                - download: none

                - template: /pipelines/api-validate-haft-ring-steps-template.yml
                  parameters:
                    instance: ${{instance.name}}
                    type: ${{stage.name}}

                - bash: echo "##vso[build.addbuildtag]${{instance.name}}_HAFT"
                  displayName: Add build tag